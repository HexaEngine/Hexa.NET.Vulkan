// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.Vulkan
{
	public unsafe partial class Device
	{

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkCommandPool pCommandPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkCommandPool* ppCommandPool1 = &pCommandPool)
				{
					VkResult ret = CreateCommandPoolNative(device, pCreateInfo, ppAllocator0, ppCommandPool1);
					return ret;
				}
			}
		}

		public VkResult CreateCommandPool(VkDevice device, Span<VkCommandPoolCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkCommandPool> pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkCommandPool* ppCommandPool2 = pCommandPool)
					{
						VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, ppAllocator1, ppCommandPool2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkCommandPool pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkCommandPool* ppCommandPool2 = &pCommandPool)
					{
						VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, ppAllocator1, ppCommandPool2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyCommandPoolNative(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)funcTable[70])(device, commandPool, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, nint, void>)funcTable[70])(device, commandPool, (nint)pAllocator);
			#endif
		}

		public void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)
		{
			DestroyCommandPoolNative(device, commandPool, pAllocator);
		}

		public void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyCommandPoolNative(device, commandPool, ppAllocator0);
			}
		}

		public void DestroyCommandPool(VkDevice device, VkCommandPool commandPool, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyCommandPoolNative(device, commandPool, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult ResetCommandPoolNative(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)funcTable[71])(device, commandPool, flags);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)funcTable[71])(device, commandPool, flags);
			#endif
		}

		public VkResult ResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
		{
			VkResult ret = ResetCommandPoolNative(device, commandPool, flags);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult AllocateCommandBuffersNative(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer*, VkResult>)funcTable[72])(device, pAllocateInfo, pCommandBuffers);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, VkResult>)funcTable[72])(device, (nint)pAllocateInfo, (nint)pCommandBuffers);
			#endif
		}

		public VkResult AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)
		{
			VkResult ret = AllocateCommandBuffersNative(device, pAllocateInfo, pCommandBuffers);
			return ret;
		}

		public VkResult AllocateCommandBuffers(VkDevice device, Span<VkCommandBufferAllocateInfo> pAllocateInfo, VkCommandBuffer* pCommandBuffers)
		{
			fixed (VkCommandBufferAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				VkResult ret = AllocateCommandBuffersNative(device, ppAllocateInfo0, pCommandBuffers);
				return ret;
			}
		}

		public VkResult AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo pAllocateInfo, VkCommandBuffer* pCommandBuffers)
		{
			fixed (VkCommandBufferAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				VkResult ret = AllocateCommandBuffersNative(device, ppAllocateInfo0, pCommandBuffers);
				return ret;
			}
		}

		public VkResult AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, Span<VkCommandBuffer> pCommandBuffers)
		{
			fixed (VkCommandBuffer* ppCommandBuffers0 = pCommandBuffers)
			{
				VkResult ret = AllocateCommandBuffersNative(device, pAllocateInfo, ppCommandBuffers0);
				return ret;
			}
		}

		public VkResult AllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, ref VkCommandBuffer pCommandBuffers)
		{
			fixed (VkCommandBuffer* ppCommandBuffers0 = &pCommandBuffers)
			{
				VkResult ret = AllocateCommandBuffersNative(device, pAllocateInfo, ppCommandBuffers0);
				return ret;
			}
		}

		public VkResult AllocateCommandBuffers(VkDevice device, Span<VkCommandBufferAllocateInfo> pAllocateInfo, Span<VkCommandBuffer> pCommandBuffers)
		{
			fixed (VkCommandBufferAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				fixed (VkCommandBuffer* ppCommandBuffers1 = pCommandBuffers)
				{
					VkResult ret = AllocateCommandBuffersNative(device, ppAllocateInfo0, ppCommandBuffers1);
					return ret;
				}
			}
		}

		public VkResult AllocateCommandBuffers(VkDevice device, ref VkCommandBufferAllocateInfo pAllocateInfo, ref VkCommandBuffer pCommandBuffers)
		{
			fixed (VkCommandBufferAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				fixed (VkCommandBuffer* ppCommandBuffers1 = &pCommandBuffers)
				{
					VkResult ret = AllocateCommandBuffersNative(device, ppAllocateInfo0, ppCommandBuffers1);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FreeCommandBuffersNative(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* pCommandBuffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, VkCommandBuffer*, void>)funcTable[73])(device, commandPool, commandBufferCount, pCommandBuffers);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, nint, void>)funcTable[73])(device, commandPool, commandBufferCount, (nint)pCommandBuffers);
			#endif
		}

		public void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* pCommandBuffers)
		{
			FreeCommandBuffersNative(device, commandPool, commandBufferCount, pCommandBuffers);
		}

		public void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, Span<VkCommandBuffer> pCommandBuffers)
		{
			fixed (VkCommandBuffer* ppCommandBuffers0 = pCommandBuffers)
			{
				FreeCommandBuffersNative(device, commandPool, commandBufferCount, ppCommandBuffers0);
			}
		}

		public void FreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, ref VkCommandBuffer pCommandBuffers)
		{
			fixed (VkCommandBuffer* ppCommandBuffers0 = &pCommandBuffers)
			{
				FreeCommandBuffersNative(device, commandPool, commandBufferCount, ppCommandBuffers0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult BeginCommandBufferNative(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult>)funcTable[74])(commandBuffer, pBeginInfo);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, VkResult>)funcTable[74])(commandBuffer, (nint)pBeginInfo);
			#endif
		}

		public VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)
		{
			VkResult ret = BeginCommandBufferNative(commandBuffer, pBeginInfo);
			return ret;
		}

		public VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, Span<VkCommandBufferBeginInfo> pBeginInfo)
		{
			fixed (VkCommandBufferBeginInfo* ppBeginInfo0 = pBeginInfo)
			{
				VkResult ret = BeginCommandBufferNative(commandBuffer, ppBeginInfo0);
				return ret;
			}
		}

		public VkResult BeginCommandBuffer(VkCommandBuffer commandBuffer, ref VkCommandBufferBeginInfo pBeginInfo)
		{
			fixed (VkCommandBufferBeginInfo* ppBeginInfo0 = &pBeginInfo)
			{
				VkResult ret = BeginCommandBufferNative(commandBuffer, ppBeginInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult EndCommandBufferNative(VkCommandBuffer commandBuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResult>)funcTable[75])(commandBuffer);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResult>)funcTable[75])(commandBuffer);
			#endif
		}

		public VkResult EndCommandBuffer(VkCommandBuffer commandBuffer)
		{
			VkResult ret = EndCommandBufferNative(commandBuffer);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult ResetCommandBufferNative(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)funcTable[76])(commandBuffer, flags);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)funcTable[76])(commandBuffer, flags);
			#endif
		}

		public VkResult ResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
		{
			VkResult ret = ResetCommandBufferNative(commandBuffer, flags);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindPipelineNative(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)funcTable[77])(commandBuffer, pipelineBindPoint, pipeline);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)funcTable[77])(commandBuffer, pipelineBindPoint, pipeline);
			#endif
		}

		public void CmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
		{
			CmdBindPipelineNative(commandBuffer, pipelineBindPoint, pipeline);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetViewportNative(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* pViewports)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkViewport*, void>)funcTable[78])(commandBuffer, firstViewport, viewportCount, pViewports);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, nint, void>)funcTable[78])(commandBuffer, firstViewport, viewportCount, (nint)pViewports);
			#endif
		}

		public void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* pViewports)
		{
			CmdSetViewportNative(commandBuffer, firstViewport, viewportCount, pViewports);
		}

		public void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, Span<VkViewport> pViewports)
		{
			fixed (VkViewport* ppViewports0 = pViewports)
			{
				CmdSetViewportNative(commandBuffer, firstViewport, viewportCount, ppViewports0);
			}
		}

		public void CmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, ref VkViewport pViewports)
		{
			fixed (VkViewport* ppViewports0 = &pViewports)
			{
				CmdSetViewportNative(commandBuffer, firstViewport, viewportCount, ppViewports0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetScissorNative(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* pScissors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkRect2D*, void>)funcTable[79])(commandBuffer, firstScissor, scissorCount, pScissors);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, nint, void>)funcTable[79])(commandBuffer, firstScissor, scissorCount, (nint)pScissors);
			#endif
		}

		public void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* pScissors)
		{
			CmdSetScissorNative(commandBuffer, firstScissor, scissorCount, pScissors);
		}

		public void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, Span<VkRect2D> pScissors)
		{
			fixed (VkRect2D* ppScissors0 = pScissors)
			{
				CmdSetScissorNative(commandBuffer, firstScissor, scissorCount, ppScissors0);
			}
		}

		public void CmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, ref VkRect2D pScissors)
		{
			fixed (VkRect2D* ppScissors0 = &pScissors)
			{
				CmdSetScissorNative(commandBuffer, firstScissor, scissorCount, ppScissors0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetLineWidthNative(VkCommandBuffer commandBuffer, float lineWidth)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)funcTable[80])(commandBuffer, lineWidth);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, float, void>)funcTable[80])(commandBuffer, lineWidth);
			#endif
		}

		public void CmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
		{
			CmdSetLineWidthNative(commandBuffer, lineWidth);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthBiasNative(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, float, void>)funcTable[81])(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, float, void>)funcTable[81])(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
			#endif
		}

		public void CmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
		{
			CmdSetDepthBiasNative(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetBlendConstantsNative(VkCommandBuffer commandBuffer, Vector4 blendConstants)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, Vector4, void>)funcTable[82])(commandBuffer, blendConstants);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, Vector4, void>)funcTable[82])(commandBuffer, blendConstants);
			#endif
		}

		public void CmdSetBlendConstants(VkCommandBuffer commandBuffer, Vector4 blendConstants)
		{
			CmdSetBlendConstantsNative(commandBuffer, blendConstants);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthBoundsNative(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, void>)funcTable[83])(commandBuffer, minDepthBounds, maxDepthBounds);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, float, float, void>)funcTable[83])(commandBuffer, minDepthBounds, maxDepthBounds);
			#endif
		}

		public void CmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
		{
			CmdSetDepthBoundsNative(commandBuffer, minDepthBounds, maxDepthBounds);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetStencilCompareMaskNative(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)funcTable[84])(commandBuffer, faceMask, compareMask);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)funcTable[84])(commandBuffer, faceMask, compareMask);
			#endif
		}

		public void CmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
		{
			CmdSetStencilCompareMaskNative(commandBuffer, faceMask, compareMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetStencilWriteMaskNative(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)funcTable[85])(commandBuffer, faceMask, writeMask);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)funcTable[85])(commandBuffer, faceMask, writeMask);
			#endif
		}

		public void CmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
		{
			CmdSetStencilWriteMaskNative(commandBuffer, faceMask, writeMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetStencilReferenceNative(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)funcTable[86])(commandBuffer, faceMask, reference);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, uint, void>)funcTable[86])(commandBuffer, faceMask, reference);
			#endif
		}

		public void CmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference)
		{
			CmdSetStencilReferenceNative(commandBuffer, faceMask, reference);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindDescriptorSetsNative(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet*, uint, uint*, void>)funcTable[87])(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, nint, uint, nint, void>)funcTable[87])(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, (nint)pDescriptorSets, dynamicOffsetCount, (nint)pDynamicOffsets);
			#endif
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
		{
			CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, Span<VkDescriptorSet> pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = pDescriptorSets)
			{
				CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ppDescriptorSets0, dynamicOffsetCount, pDynamicOffsets);
			}
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = &pDescriptorSets)
			{
				CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ppDescriptorSets0, dynamicOffsetCount, pDynamicOffsets);
			}
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, Span<uint> pDynamicOffsets)
		{
			fixed (uint* ppDynamicOffsets0 = pDynamicOffsets)
			{
				CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, ppDynamicOffsets0);
			}
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets)
		{
			fixed (uint* ppDynamicOffsets0 = &pDynamicOffsets)
			{
				CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, ppDynamicOffsets0);
			}
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, Span<VkDescriptorSet> pDescriptorSets, uint dynamicOffsetCount, Span<uint> pDynamicOffsets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = pDescriptorSets)
			{
				fixed (uint* ppDynamicOffsets1 = pDynamicOffsets)
				{
					CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ppDescriptorSets0, dynamicOffsetCount, ppDynamicOffsets1);
				}
			}
		}

		public void CmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, ref VkDescriptorSet pDescriptorSets, uint dynamicOffsetCount, ref uint pDynamicOffsets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = &pDescriptorSets)
			{
				fixed (uint* ppDynamicOffsets1 = &pDynamicOffsets)
				{
					CmdBindDescriptorSetsNative(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, ppDescriptorSets0, dynamicOffsetCount, ppDynamicOffsets1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindIndexBufferNative(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void>)funcTable[88])(commandBuffer, buffer, offset, indexType);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void>)funcTable[88])(commandBuffer, buffer, offset, indexType);
			#endif
		}

		public void CmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
		{
			CmdBindIndexBufferNative(commandBuffer, buffer, offset, indexType);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindVertexBuffersNative(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void>)funcTable[89])(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, nint, nint, void>)funcTable[89])(commandBuffer, firstBinding, bindingCount, (nint)pBuffers, (nint)pOffsets);
			#endif
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)
		{
			CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, VkDeviceSize* pOffsets)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets);
			}
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, VkDeviceSize* pOffsets)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets);
			}
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, Span<VkDeviceSize> pOffsets)
		{
			fixed (VkDeviceSize* ppOffsets0 = pOffsets)
			{
				CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0);
			}
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, ref VkDeviceSize pOffsets)
		{
			fixed (VkDeviceSize* ppOffsets0 = &pOffsets)
			{
				CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0);
			}
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, Span<VkDeviceSize> pOffsets)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = pOffsets)
				{
					CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1);
				}
			}
		}

		public void CmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, ref VkDeviceSize pOffsets)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = &pOffsets)
				{
					CmdBindVertexBuffersNative(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDrawNative(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, void>)funcTable[90])(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, void>)funcTable[90])(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
			#endif
		}

		public void CmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
		{
			CmdDrawNative(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDrawIndexedNative(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, int, uint, void>)funcTable[91])(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, int, uint, void>)funcTable[91])(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
			#endif
		}

		public void CmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
		{
			CmdDrawIndexedNative(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDrawIndirectNative(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[92])(commandBuffer, buffer, offset, drawCount, stride);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[92])(commandBuffer, buffer, offset, drawCount, stride);
			#endif
		}

		public void CmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
		{
			CmdDrawIndirectNative(commandBuffer, buffer, offset, drawCount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDrawIndexedIndirectNative(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[93])(commandBuffer, buffer, offset, drawCount, stride);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[93])(commandBuffer, buffer, offset, drawCount, stride);
			#endif
		}

		public void CmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
		{
			CmdDrawIndexedIndirectNative(commandBuffer, buffer, offset, drawCount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDispatchNative(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void>)funcTable[94])(commandBuffer, groupCountX, groupCountY, groupCountZ);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, void>)funcTable[94])(commandBuffer, groupCountX, groupCountY, groupCountZ);
			#endif
		}

		public void CmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			CmdDispatchNative(commandBuffer, groupCountX, groupCountY, groupCountZ);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDispatchIndirectNative(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void>)funcTable[95])(commandBuffer, buffer, offset);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, void>)funcTable[95])(commandBuffer, buffer, offset);
			#endif
		}

		public void CmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
		{
			CmdDispatchIndirectNative(commandBuffer, buffer, offset);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyBufferNative(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* pRegions)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy*, void>)funcTable[96])(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkBuffer, uint, nint, void>)funcTable[96])(commandBuffer, srcBuffer, dstBuffer, regionCount, (nint)pRegions);
			#endif
		}

		public void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* pRegions)
		{
			CmdCopyBufferNative(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
		}

		public void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, Span<VkBufferCopy> pRegions)
		{
			fixed (VkBufferCopy* ppRegions0 = pRegions)
			{
				CmdCopyBufferNative(commandBuffer, srcBuffer, dstBuffer, regionCount, ppRegions0);
			}
		}

		public void CmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, ref VkBufferCopy pRegions)
		{
			fixed (VkBufferCopy* ppRegions0 = &pRegions)
			{
				CmdCopyBufferNative(commandBuffer, srcBuffer, dstBuffer, regionCount, ppRegions0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyImageNative(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* pRegions)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy*, void>)funcTable[97])(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, nint, void>)funcTable[97])(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, (nint)pRegions);
			#endif
		}

		public void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* pRegions)
		{
			CmdCopyImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
		}

		public void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, Span<VkImageCopy> pRegions)
		{
			fixed (VkImageCopy* ppRegions0 = pRegions)
			{
				CmdCopyImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ppRegions0);
			}
		}

		public void CmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageCopy pRegions)
		{
			fixed (VkImageCopy* ppRegions0 = &pRegions)
			{
				CmdCopyImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ppRegions0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBlitImageNative(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* pRegions, VkFilter filter)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit*, VkFilter, void>)funcTable[98])(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, nint, VkFilter, void>)funcTable[98])(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, (nint)pRegions, filter);
			#endif
		}

		public void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* pRegions, VkFilter filter)
		{
			CmdBlitImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
		}

		public void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, Span<VkImageBlit> pRegions, VkFilter filter)
		{
			fixed (VkImageBlit* ppRegions0 = pRegions)
			{
				CmdBlitImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ppRegions0, filter);
			}
		}

		public void CmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageBlit pRegions, VkFilter filter)
		{
			fixed (VkImageBlit* ppRegions0 = &pRegions)
			{
				CmdBlitImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ppRegions0, filter);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyBufferToImageNative(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* pRegions)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy*, void>)funcTable[99])(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, nint, void>)funcTable[99])(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, (nint)pRegions);
			#endif
		}

		public void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* pRegions)
		{
			CmdCopyBufferToImageNative(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
		}

		public void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, Span<VkBufferImageCopy> pRegions)
		{
			fixed (VkBufferImageCopy* ppRegions0 = pRegions)
			{
				CmdCopyBufferToImageNative(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, ppRegions0);
			}
		}

		public void CmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkBufferImageCopy pRegions)
		{
			fixed (VkBufferImageCopy* ppRegions0 = &pRegions)
			{
				CmdCopyBufferToImageNative(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, ppRegions0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyImageToBufferNative(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* pRegions)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy*, void>)funcTable[100])(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, nint, void>)funcTable[100])(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, (nint)pRegions);
			#endif
		}

		public void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* pRegions)
		{
			CmdCopyImageToBufferNative(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
		}

		public void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, Span<VkBufferImageCopy> pRegions)
		{
			fixed (VkBufferImageCopy* ppRegions0 = pRegions)
			{
				CmdCopyImageToBufferNative(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, ppRegions0);
			}
		}

		public void CmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, ref VkBufferImageCopy pRegions)
		{
			fixed (VkBufferImageCopy* ppRegions0 = &pRegions)
			{
				CmdCopyImageToBufferNative(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, ppRegions0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdUpdateBufferNative(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void>)funcTable[101])(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, nint, void>)funcTable[101])(commandBuffer, dstBuffer, dstOffset, dataSize, (nint)pData);
			#endif
		}

		public void CmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData)
		{
			CmdUpdateBufferNative(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
		}

		public void CmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, nint pData)
		{
			CmdUpdateBufferNative(commandBuffer, dstBuffer, dstOffset, dataSize, (void*)pData);
		}

		public void CmdUpdateBuffer<TPData>(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, Span<TPData> pData) where TPData : unmanaged
		{
			fixed (TPData* ppData0 = pData)
			{
				CmdUpdateBufferNative(commandBuffer, dstBuffer, dstOffset, dataSize, ppData0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdFillBufferNative(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void>)funcTable[102])(commandBuffer, dstBuffer, dstOffset, size, data);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void>)funcTable[102])(commandBuffer, dstBuffer, dstOffset, size, data);
			#endif
		}

		public void CmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data)
		{
			CmdFillBufferNative(commandBuffer, dstBuffer, dstOffset, size, data);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdClearColorImageNative(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void>)funcTable[103])(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, nint, uint, nint, void>)funcTable[103])(commandBuffer, image, imageLayout, (nint)pColor, rangeCount, (nint)pRanges);
			#endif
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			CmdClearColorImageNative(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, Span<VkClearColorValue> pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			fixed (VkClearColorValue* ppColor0 = pColor)
			{
				CmdClearColorImageNative(commandBuffer, image, imageLayout, ppColor0, rangeCount, pRanges);
			}
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			fixed (VkClearColorValue* ppColor0 = &pColor)
			{
				CmdClearColorImageNative(commandBuffer, image, imageLayout, ppColor0, rangeCount, pRanges);
			}
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, Span<VkImageSubresourceRange> pRanges)
		{
			fixed (VkImageSubresourceRange* ppRanges0 = pRanges)
			{
				CmdClearColorImageNative(commandBuffer, image, imageLayout, pColor, rangeCount, ppRanges0);
			}
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, ref VkImageSubresourceRange pRanges)
		{
			fixed (VkImageSubresourceRange* ppRanges0 = &pRanges)
			{
				CmdClearColorImageNative(commandBuffer, image, imageLayout, pColor, rangeCount, ppRanges0);
			}
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, Span<VkClearColorValue> pColor, uint rangeCount, Span<VkImageSubresourceRange> pRanges)
		{
			fixed (VkClearColorValue* ppColor0 = pColor)
			{
				fixed (VkImageSubresourceRange* ppRanges1 = pRanges)
				{
					CmdClearColorImageNative(commandBuffer, image, imageLayout, ppColor0, rangeCount, ppRanges1);
				}
			}
		}

		public void CmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearColorValue pColor, uint rangeCount, ref VkImageSubresourceRange pRanges)
		{
			fixed (VkClearColorValue* ppColor0 = &pColor)
			{
				fixed (VkImageSubresourceRange* ppRanges1 = &pRanges)
				{
					CmdClearColorImageNative(commandBuffer, image, imageLayout, ppColor0, rangeCount, ppRanges1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdClearDepthStencilImageNative(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void>)funcTable[104])(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, nint, uint, nint, void>)funcTable[104])(commandBuffer, image, imageLayout, (nint)pDepthStencil, rangeCount, (nint)pRanges);
			#endif
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, Span<VkClearDepthStencilValue> pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			fixed (VkClearDepthStencilValue* ppDepthStencil0 = pDepthStencil)
			{
				CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, ppDepthStencil0, rangeCount, pRanges);
			}
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
		{
			fixed (VkClearDepthStencilValue* ppDepthStencil0 = &pDepthStencil)
			{
				CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, ppDepthStencil0, rangeCount, pRanges);
			}
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, Span<VkImageSubresourceRange> pRanges)
		{
			fixed (VkImageSubresourceRange* ppRanges0 = pRanges)
			{
				CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, ppRanges0);
			}
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, ref VkImageSubresourceRange pRanges)
		{
			fixed (VkImageSubresourceRange* ppRanges0 = &pRanges)
			{
				CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, ppRanges0);
			}
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, Span<VkClearDepthStencilValue> pDepthStencil, uint rangeCount, Span<VkImageSubresourceRange> pRanges)
		{
			fixed (VkClearDepthStencilValue* ppDepthStencil0 = pDepthStencil)
			{
				fixed (VkImageSubresourceRange* ppRanges1 = pRanges)
				{
					CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, ppDepthStencil0, rangeCount, ppRanges1);
				}
			}
		}

		public void CmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, ref VkClearDepthStencilValue pDepthStencil, uint rangeCount, ref VkImageSubresourceRange pRanges)
		{
			fixed (VkClearDepthStencilValue* ppDepthStencil0 = &pDepthStencil)
			{
				fixed (VkImageSubresourceRange* ppRanges1 = &pRanges)
				{
					CmdClearDepthStencilImageNative(commandBuffer, image, imageLayout, ppDepthStencil0, rangeCount, ppRanges1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdClearAttachmentsNative(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, VkClearRect* pRects)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkClearAttachment*, uint, VkClearRect*, void>)funcTable[105])(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, nint, uint, nint, void>)funcTable[105])(commandBuffer, attachmentCount, (nint)pAttachments, rectCount, (nint)pRects);
			#endif
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, VkClearRect* pRects)
		{
			CmdClearAttachmentsNative(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, Span<VkClearAttachment> pAttachments, uint rectCount, VkClearRect* pRects)
		{
			fixed (VkClearAttachment* ppAttachments0 = pAttachments)
			{
				CmdClearAttachmentsNative(commandBuffer, attachmentCount, ppAttachments0, rectCount, pRects);
			}
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment pAttachments, uint rectCount, VkClearRect* pRects)
		{
			fixed (VkClearAttachment* ppAttachments0 = &pAttachments)
			{
				CmdClearAttachmentsNative(commandBuffer, attachmentCount, ppAttachments0, rectCount, pRects);
			}
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, Span<VkClearRect> pRects)
		{
			fixed (VkClearRect* ppRects0 = pRects)
			{
				CmdClearAttachmentsNative(commandBuffer, attachmentCount, pAttachments, rectCount, ppRects0);
			}
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, ref VkClearRect pRects)
		{
			fixed (VkClearRect* ppRects0 = &pRects)
			{
				CmdClearAttachmentsNative(commandBuffer, attachmentCount, pAttachments, rectCount, ppRects0);
			}
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, Span<VkClearAttachment> pAttachments, uint rectCount, Span<VkClearRect> pRects)
		{
			fixed (VkClearAttachment* ppAttachments0 = pAttachments)
			{
				fixed (VkClearRect* ppRects1 = pRects)
				{
					CmdClearAttachmentsNative(commandBuffer, attachmentCount, ppAttachments0, rectCount, ppRects1);
				}
			}
		}

		public void CmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, ref VkClearAttachment pAttachments, uint rectCount, ref VkClearRect pRects)
		{
			fixed (VkClearAttachment* ppAttachments0 = &pAttachments)
			{
				fixed (VkClearRect* ppRects1 = &pRects)
				{
					CmdClearAttachmentsNative(commandBuffer, attachmentCount, ppAttachments0, rectCount, ppRects1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdResolveImageNative(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* pRegions)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve*, void>)funcTable[106])(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, nint, void>)funcTable[106])(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, (nint)pRegions);
			#endif
		}

		public void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* pRegions)
		{
			CmdResolveImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
		}

		public void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, Span<VkImageResolve> pRegions)
		{
			fixed (VkImageResolve* ppRegions0 = pRegions)
			{
				CmdResolveImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ppRegions0);
			}
		}

		public void CmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, ref VkImageResolve pRegions)
		{
			fixed (VkImageResolve* ppRegions0 = &pRegions)
			{
				CmdResolveImageNative(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, ppRegions0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetEventNative(VkCommandBuffer commandBuffer, VkEvent evnt, VkPipelineStageFlags stageMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)funcTable[107])(commandBuffer, evnt, stageMask);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)funcTable[107])(commandBuffer, evnt, stageMask);
			#endif
		}

		public void CmdSetEvent(VkCommandBuffer commandBuffer, VkEvent evnt, VkPipelineStageFlags stageMask)
		{
			CmdSetEventNative(commandBuffer, evnt, stageMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdResetEventNative(VkCommandBuffer commandBuffer, VkEvent evnt, VkPipelineStageFlags stageMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)funcTable[108])(commandBuffer, evnt, stageMask);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)funcTable[108])(commandBuffer, evnt, stageMask);
			#endif
		}

		public void CmdResetEvent(VkCommandBuffer commandBuffer, VkEvent evnt, VkPipelineStageFlags stageMask)
		{
			CmdResetEventNative(commandBuffer, evnt, stageMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdWaitEventsNative(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)funcTable[109])(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, nint, VkPipelineStageFlags, VkPipelineStageFlags, uint, nint, uint, nint, uint, nint, void>)funcTable[109])(commandBuffer, eventCount, (nint)pEvents, srcStageMask, dstStageMask, memoryBarrierCount, (nint)pMemoryBarriers, bufferMemoryBarrierCount, (nint)pBufferMemoryBarriers, imageMemoryBarrierCount, (nint)pImageMemoryBarriers);
			#endif
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = pMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = &pMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = pBufferMemoryBarriers)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = &pBufferMemoryBarriers)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = pBufferMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = &pBufferMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = pBufferMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = &pBufferMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = pMemoryBarriers)
				{
					fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers2 = pBufferMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, ppBufferMemoryBarriers2, imageMemoryBarrierCount, pImageMemoryBarriers);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = &pMemoryBarriers)
				{
					fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers2 = &pBufferMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, ppBufferMemoryBarriers2, imageMemoryBarrierCount, pImageMemoryBarriers);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkImageMemoryBarrier* ppImageMemoryBarriers0 = pImageMemoryBarriers)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers0);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkImageMemoryBarrier* ppImageMemoryBarriers0 = &pImageMemoryBarriers)
			{
				CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers0);
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = pImageMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = &pImageMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = pImageMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = &pImageMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = pMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = pImageMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = &pMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = &pImageMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = pBufferMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = pImageMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = &pBufferMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = &pImageMemoryBarriers)
				{
					CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = pBufferMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = pImageMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = &pBufferMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = &pImageMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = pBufferMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = pImageMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = &pBufferMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = &pImageMemoryBarriers)
					{
						CmdWaitEventsNative(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = pMemoryBarriers)
				{
					fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers2 = pBufferMemoryBarriers)
					{
						fixed (VkImageMemoryBarrier* ppImageMemoryBarriers3 = pImageMemoryBarriers)
						{
							CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, ppBufferMemoryBarriers2, imageMemoryBarrierCount, ppImageMemoryBarriers3);
						}
					}
				}
			}
		}

		public void CmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkMemoryBarrier* ppMemoryBarriers1 = &pMemoryBarriers)
				{
					fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers2 = &pBufferMemoryBarriers)
					{
						fixed (VkImageMemoryBarrier* ppImageMemoryBarriers3 = &pImageMemoryBarriers)
						{
							CmdWaitEventsNative(commandBuffer, eventCount, ppEvents0, srcStageMask, dstStageMask, memoryBarrierCount, ppMemoryBarriers1, bufferMemoryBarrierCount, ppBufferMemoryBarriers2, imageMemoryBarrierCount, ppImageMemoryBarriers3);
						}
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPipelineBarrierNative(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)funcTable[110])(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, nint, uint, nint, uint, nint, void>)funcTable[110])(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, (nint)pMemoryBarriers, bufferMemoryBarrierCount, (nint)pBufferMemoryBarriers, imageMemoryBarrierCount, (nint)pImageMemoryBarriers);
			#endif
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = pBufferMemoryBarriers)
			{
				CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = &pBufferMemoryBarriers)
			{
				CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, pImageMemoryBarriers);
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = pBufferMemoryBarriers)
				{
					CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = &pBufferMemoryBarriers)
				{
					CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, pImageMemoryBarriers);
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkImageMemoryBarrier* ppImageMemoryBarriers0 = pImageMemoryBarriers)
			{
				CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers0);
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkImageMemoryBarrier* ppImageMemoryBarriers0 = &pImageMemoryBarriers)
			{
				CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers0);
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = pImageMemoryBarriers)
				{
					CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = &pImageMemoryBarriers)
				{
					CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = pBufferMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = pImageMemoryBarriers)
				{
					CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers0 = &pBufferMemoryBarriers)
			{
				fixed (VkImageMemoryBarrier* ppImageMemoryBarriers1 = &pImageMemoryBarriers)
				{
					CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, ppBufferMemoryBarriers0, imageMemoryBarrierCount, ppImageMemoryBarriers1);
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, Span<VkMemoryBarrier> pMemoryBarriers, uint bufferMemoryBarrierCount, Span<VkBufferMemoryBarrier> pBufferMemoryBarriers, uint imageMemoryBarrierCount, Span<VkImageMemoryBarrier> pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = pBufferMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = pImageMemoryBarriers)
					{
						CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		public void CmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, ref VkMemoryBarrier pMemoryBarriers, uint bufferMemoryBarrierCount, ref VkBufferMemoryBarrier pBufferMemoryBarriers, uint imageMemoryBarrierCount, ref VkImageMemoryBarrier pImageMemoryBarriers)
		{
			fixed (VkMemoryBarrier* ppMemoryBarriers0 = &pMemoryBarriers)
			{
				fixed (VkBufferMemoryBarrier* ppBufferMemoryBarriers1 = &pBufferMemoryBarriers)
				{
					fixed (VkImageMemoryBarrier* ppImageMemoryBarriers2 = &pImageMemoryBarriers)
					{
						CmdPipelineBarrierNative(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, ppMemoryBarriers0, bufferMemoryBarrierCount, ppBufferMemoryBarriers1, imageMemoryBarrierCount, ppImageMemoryBarriers2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBeginQueryNative(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)funcTable[111])(commandBuffer, queryPool, query, flags);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)funcTable[111])(commandBuffer, queryPool, query, flags);
			#endif
		}

		public void CmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags)
		{
			CmdBeginQueryNative(commandBuffer, queryPool, query, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdEndQueryNative(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, void>)funcTable[112])(commandBuffer, queryPool, query);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, void>)funcTable[112])(commandBuffer, queryPool, query);
			#endif
		}

		public void CmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query)
		{
			CmdEndQueryNative(commandBuffer, queryPool, query);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdResetQueryPoolNative(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void>)funcTable[113])(commandBuffer, queryPool, firstQuery, queryCount);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, void>)funcTable[113])(commandBuffer, queryPool, firstQuery, queryCount);
			#endif
		}

		public void CmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			CmdResetQueryPoolNative(commandBuffer, queryPool, firstQuery, queryCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdWriteTimestampNative(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void>)funcTable[114])(commandBuffer, pipelineStage, queryPool, query);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineStageFlags, VkQueryPool, uint, void>)funcTable[114])(commandBuffer, pipelineStage, queryPool, query);
			#endif
		}

		public void CmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlags pipelineStage, VkQueryPool queryPool, uint query)
		{
			CmdWriteTimestampNative(commandBuffer, pipelineStage, queryPool, query);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyQueryPoolResultsNative(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void>)funcTable[115])(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void>)funcTable[115])(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
			#endif
		}

		public void CmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
		{
			CmdCopyQueryPoolResultsNative(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPushConstantsNative(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void>)funcTable[116])(commandBuffer, layout, stageFlags, offset, size, pValues);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, nint, void>)funcTable[116])(commandBuffer, layout, stageFlags, offset, size, (nint)pValues);
			#endif
		}

		public void CmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
		{
			CmdPushConstantsNative(commandBuffer, layout, stageFlags, offset, size, pValues);
		}

		public void CmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, nint pValues)
		{
			CmdPushConstantsNative(commandBuffer, layout, stageFlags, offset, size, (void*)pValues);
		}

		public void CmdPushConstants<TPValues>(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, Span<TPValues> pValues) where TPValues : unmanaged
		{
			fixed (TPValues* ppValues0 = pValues)
			{
				CmdPushConstantsNative(commandBuffer, layout, stageFlags, offset, size, ppValues0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBeginRenderPassNative(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void>)funcTable[117])(commandBuffer, pRenderPassBegin, contents);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, VkSubpassContents, void>)funcTable[117])(commandBuffer, (nint)pRenderPassBegin, contents);
			#endif
		}

		public void CmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
		{
			CmdBeginRenderPassNative(commandBuffer, pRenderPassBegin, contents);
		}

		public void CmdBeginRenderPass(VkCommandBuffer commandBuffer, Span<VkRenderPassBeginInfo> pRenderPassBegin, VkSubpassContents contents)
		{
			fixed (VkRenderPassBeginInfo* ppRenderPassBegin0 = pRenderPassBegin)
			{
				CmdBeginRenderPassNative(commandBuffer, ppRenderPassBegin0, contents);
			}
		}

		public void CmdBeginRenderPass(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, VkSubpassContents contents)
		{
			fixed (VkRenderPassBeginInfo* ppRenderPassBegin0 = &pRenderPassBegin)
			{
				CmdBeginRenderPassNative(commandBuffer, ppRenderPassBegin0, contents);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdNextSubpassNative(VkCommandBuffer commandBuffer, VkSubpassContents contents)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassContents, void>)funcTable[118])(commandBuffer, contents);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassContents, void>)funcTable[118])(commandBuffer, contents);
			#endif
		}

		public void CmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
		{
			CmdNextSubpassNative(commandBuffer, contents);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdEndRenderPassNative(VkCommandBuffer commandBuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)funcTable[119])(commandBuffer);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)funcTable[119])(commandBuffer);
			#endif
		}

		public void CmdEndRenderPass(VkCommandBuffer commandBuffer)
		{
			CmdEndRenderPassNative(commandBuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdExecuteCommandsNative(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* pCommandBuffers)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkCommandBuffer*, void>)funcTable[120])(commandBuffer, commandBufferCount, pCommandBuffers);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, nint, void>)funcTable[120])(commandBuffer, commandBufferCount, (nint)pCommandBuffers);
			#endif
		}

		public void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* pCommandBuffers)
		{
			CmdExecuteCommandsNative(commandBuffer, commandBufferCount, pCommandBuffers);
		}

		public void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, Span<VkCommandBuffer> pCommandBuffers)
		{
			fixed (VkCommandBuffer* ppCommandBuffers0 = pCommandBuffers)
			{
				CmdExecuteCommandsNative(commandBuffer, commandBufferCount, ppCommandBuffers0);
			}
		}

		public void CmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, ref VkCommandBuffer pCommandBuffers)
		{
			fixed (VkCommandBuffer* ppCommandBuffers0 = &pCommandBuffers)
			{
				CmdExecuteCommandsNative(commandBuffer, commandBufferCount, ppCommandBuffers0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPushDescriptorSetNative(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet*, void>)funcTable[121])(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, nint, void>)funcTable[121])(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, (nint)pDescriptorWrites);
			#endif
		}

		public void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
		{
			CmdPushDescriptorSetNative(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
		}

		public void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, Span<VkWriteDescriptorSet> pDescriptorWrites)
		{
			fixed (VkWriteDescriptorSet* ppDescriptorWrites0 = pDescriptorWrites)
			{
				CmdPushDescriptorSetNative(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, ppDescriptorWrites0);
			}
		}

		public void CmdPushDescriptorSet(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, ref VkWriteDescriptorSet pDescriptorWrites)
		{
			fixed (VkWriteDescriptorSet* ppDescriptorWrites0 = &pDescriptorWrites)
			{
				CmdPushDescriptorSetNative(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, ppDescriptorWrites0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void TrimCommandPoolNative(VkDevice device, VkCommandPool commandPool, uint flags)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, void>)funcTable[122])(device, commandPool, flags);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPool, uint, void>)funcTable[122])(device, commandPool, flags);
			#endif
		}

		public void TrimCommandPool(VkDevice device, VkCommandPool commandPool, uint flags)
		{
			TrimCommandPoolNative(device, commandPool, flags);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceGroupPeerMemoryFeaturesNative(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)funcTable[123])(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, uint, uint, uint, nint, void>)funcTable[123])(device, heapIndex, localDeviceIndex, remoteDeviceIndex, (nint)pPeerMemoryFeatures);
			#endif
		}

		public void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
		{
			GetDeviceGroupPeerMemoryFeaturesNative(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
		}

		public void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, Span<VkPeerMemoryFeatureFlags> pPeerMemoryFeatures)
		{
			fixed (VkPeerMemoryFeatureFlags* ppPeerMemoryFeatures0 = pPeerMemoryFeatures)
			{
				GetDeviceGroupPeerMemoryFeaturesNative(device, heapIndex, localDeviceIndex, remoteDeviceIndex, ppPeerMemoryFeatures0);
			}
		}

		public void GetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, ref VkPeerMemoryFeatureFlags pPeerMemoryFeatures)
		{
			fixed (VkPeerMemoryFeatureFlags* ppPeerMemoryFeatures0 = &pPeerMemoryFeatures)
			{
				GetDeviceGroupPeerMemoryFeaturesNative(device, heapIndex, localDeviceIndex, remoteDeviceIndex, ppPeerMemoryFeatures0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult BindBufferMemory2Native(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult>)funcTable[124])(device, bindInfoCount, pBindInfos);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkResult>)funcTable[124])(device, bindInfoCount, (nint)pBindInfos);
			#endif
		}

		public VkResult BindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
		{
			VkResult ret = BindBufferMemory2Native(device, bindInfoCount, pBindInfos);
			return ret;
		}

		public VkResult BindBufferMemory2(VkDevice device, uint bindInfoCount, Span<VkBindBufferMemoryInfo> pBindInfos)
		{
			fixed (VkBindBufferMemoryInfo* ppBindInfos0 = pBindInfos)
			{
				VkResult ret = BindBufferMemory2Native(device, bindInfoCount, ppBindInfos0);
				return ret;
			}
		}

		public VkResult BindBufferMemory2(VkDevice device, uint bindInfoCount, ref VkBindBufferMemoryInfo pBindInfos)
		{
			fixed (VkBindBufferMemoryInfo* ppBindInfos0 = &pBindInfos)
			{
				VkResult ret = BindBufferMemory2Native(device, bindInfoCount, ppBindInfos0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult BindImageMemory2Native(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkBindImageMemoryInfo*, VkResult>)funcTable[125])(device, bindInfoCount, pBindInfos);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkResult>)funcTable[125])(device, bindInfoCount, (nint)pBindInfos);
			#endif
		}

		public VkResult BindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
		{
			VkResult ret = BindImageMemory2Native(device, bindInfoCount, pBindInfos);
			return ret;
		}

		public VkResult BindImageMemory2(VkDevice device, uint bindInfoCount, Span<VkBindImageMemoryInfo> pBindInfos)
		{
			fixed (VkBindImageMemoryInfo* ppBindInfos0 = pBindInfos)
			{
				VkResult ret = BindImageMemory2Native(device, bindInfoCount, ppBindInfos0);
				return ret;
			}
		}

		public VkResult BindImageMemory2(VkDevice device, uint bindInfoCount, ref VkBindImageMemoryInfo pBindInfos)
		{
			fixed (VkBindImageMemoryInfo* ppBindInfos0 = &pBindInfos)
			{
				VkResult ret = BindImageMemory2Native(device, bindInfoCount, ppBindInfos0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDeviceMaskNative(VkCommandBuffer commandBuffer, uint deviceMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)funcTable[126])(commandBuffer, deviceMask);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, void>)funcTable[126])(commandBuffer, deviceMask);
			#endif
		}

		public void CmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask)
		{
			CmdSetDeviceMaskNative(commandBuffer, deviceMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDispatchBaseNative(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)funcTable[127])(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)funcTable[127])(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			#endif
		}

		public void CmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
		{
			CmdDispatchBaseNative(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateDescriptorUpdateTemplateNative(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)funcTable[128])(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[128])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pDescriptorUpdateTemplate);
			#endif
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
			return ret;
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, Span<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, pAllocator, pDescriptorUpdateTemplate);
				return ret;
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, pAllocator, pDescriptorUpdateTemplate);
				return ret;
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, ppAllocator0, pDescriptorUpdateTemplate);
				return ret;
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, ppAllocator0, pDescriptorUpdateTemplate);
				return ret;
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, Span<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, ppAllocator1, pDescriptorUpdateTemplate);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, ppAllocator1, pDescriptorUpdateTemplate);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkDescriptorUpdateTemplate> pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate0 = pDescriptorUpdateTemplate)
			{
				VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, pAllocator, ppDescriptorUpdateTemplate0);
				return ret;
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorUpdateTemplate pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate0 = &pDescriptorUpdateTemplate)
			{
				VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, pAllocator, ppDescriptorUpdateTemplate0);
				return ret;
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, Span<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkDescriptorUpdateTemplate> pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate1 = pDescriptorUpdateTemplate)
				{
					VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, pAllocator, ppDescriptorUpdateTemplate1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorUpdateTemplate pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate1 = &pDescriptorUpdateTemplate)
				{
					VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, pAllocator, ppDescriptorUpdateTemplate1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDescriptorUpdateTemplate> pDescriptorUpdateTemplate)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate1 = pDescriptorUpdateTemplate)
				{
					VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, ppAllocator0, ppDescriptorUpdateTemplate1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkDescriptorUpdateTemplate pDescriptorUpdateTemplate)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate1 = &pDescriptorUpdateTemplate)
				{
					VkResult ret = CreateDescriptorUpdateTemplateNative(device, pCreateInfo, ppAllocator0, ppDescriptorUpdateTemplate1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, Span<VkDescriptorUpdateTemplateCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDescriptorUpdateTemplate> pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate2 = pDescriptorUpdateTemplate)
					{
						VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, ppAllocator1, ppDescriptorUpdateTemplate2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateDescriptorUpdateTemplate(VkDevice device, ref VkDescriptorUpdateTemplateCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkDescriptorUpdateTemplate pDescriptorUpdateTemplate)
		{
			fixed (VkDescriptorUpdateTemplateCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkDescriptorUpdateTemplate* ppDescriptorUpdateTemplate2 = &pDescriptorUpdateTemplate)
					{
						VkResult ret = CreateDescriptorUpdateTemplateNative(device, ppCreateInfo0, ppAllocator1, ppDescriptorUpdateTemplate2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyDescriptorUpdateTemplateNative(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)funcTable[129])(device, descriptorUpdateTemplate, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorUpdateTemplate, nint, void>)funcTable[129])(device, descriptorUpdateTemplate, (nint)pAllocator);
			#endif
		}

		public void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
		{
			DestroyDescriptorUpdateTemplateNative(device, descriptorUpdateTemplate, pAllocator);
		}

		public void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyDescriptorUpdateTemplateNative(device, descriptorUpdateTemplate, ppAllocator0);
			}
		}

		public void DestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyDescriptorUpdateTemplateNative(device, descriptorUpdateTemplate, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void UpdateDescriptorSetWithTemplateNative(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)funcTable[130])(device, descriptorSet, descriptorUpdateTemplate, pData);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, nint, void>)funcTable[130])(device, descriptorSet, descriptorUpdateTemplate, (nint)pData);
			#endif
		}

		public void UpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
		{
			UpdateDescriptorSetWithTemplateNative(device, descriptorSet, descriptorUpdateTemplate, pData);
		}

		public void UpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, nint pData)
		{
			UpdateDescriptorSetWithTemplateNative(device, descriptorSet, descriptorUpdateTemplate, (void*)pData);
		}

		public void UpdateDescriptorSetWithTemplate<TPData>(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, Span<TPData> pData) where TPData : unmanaged
		{
			fixed (TPData* ppData0 = pData)
			{
				UpdateDescriptorSetWithTemplateNative(device, descriptorSet, descriptorUpdateTemplate, ppData0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPushDescriptorSetWithTemplateNative(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* pData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void>)funcTable[131])(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, nint, void>)funcTable[131])(commandBuffer, descriptorUpdateTemplate, layout, set, (nint)pData);
			#endif
		}

		public void CmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* pData)
		{
			CmdPushDescriptorSetWithTemplateNative(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
		}

		public void CmdPushDescriptorSetWithTemplate(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, nint pData)
		{
			CmdPushDescriptorSetWithTemplateNative(commandBuffer, descriptorUpdateTemplate, layout, set, (void*)pData);
		}

		public void CmdPushDescriptorSetWithTemplate<TPData>(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, Span<TPData> pData) where TPData : unmanaged
		{
			fixed (TPData* ppData0 = pData)
			{
				CmdPushDescriptorSetWithTemplateNative(commandBuffer, descriptorUpdateTemplate, layout, set, ppData0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetBufferMemoryRequirements2Native(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)funcTable[132])(device, pInfo, pMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[132])(device, (nint)pInfo, (nint)pMemoryRequirements);
			#endif
		}

		public void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			GetBufferMemoryRequirements2Native(device, pInfo, pMemoryRequirements);
		}

		public void GetBufferMemoryRequirements2(VkDevice device, Span<VkBufferMemoryRequirementsInfo2> pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkBufferMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				GetBufferMemoryRequirements2Native(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkBufferMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				GetBufferMemoryRequirements2Native(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = pMemoryRequirements)
			{
				GetBufferMemoryRequirements2Native(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = &pMemoryRequirements)
			{
				GetBufferMemoryRequirements2Native(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetBufferMemoryRequirements2(VkDevice device, Span<VkBufferMemoryRequirementsInfo2> pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkBufferMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = pMemoryRequirements)
				{
					GetBufferMemoryRequirements2Native(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		public void GetBufferMemoryRequirements2(VkDevice device, ref VkBufferMemoryRequirementsInfo2 pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkBufferMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = &pMemoryRequirements)
				{
					GetBufferMemoryRequirements2Native(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetImageMemoryRequirements2Native(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)funcTable[133])(device, pInfo, pMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[133])(device, (nint)pInfo, (nint)pMemoryRequirements);
			#endif
		}

		public void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			GetImageMemoryRequirements2Native(device, pInfo, pMemoryRequirements);
		}

		public void GetImageMemoryRequirements2(VkDevice device, Span<VkImageMemoryRequirementsInfo2> pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkImageMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				GetImageMemoryRequirements2Native(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkImageMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				GetImageMemoryRequirements2Native(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = pMemoryRequirements)
			{
				GetImageMemoryRequirements2Native(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = &pMemoryRequirements)
			{
				GetImageMemoryRequirements2Native(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetImageMemoryRequirements2(VkDevice device, Span<VkImageMemoryRequirementsInfo2> pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkImageMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = pMemoryRequirements)
				{
					GetImageMemoryRequirements2Native(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		public void GetImageMemoryRequirements2(VkDevice device, ref VkImageMemoryRequirementsInfo2 pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkImageMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = &pMemoryRequirements)
				{
					GetImageMemoryRequirements2Native(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetImageSparseMemoryRequirements2Native(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)funcTable[134])(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, void>)funcTable[134])(device, (nint)pInfo, (nint)pSparseMemoryRequirementCount, (nint)pSparseMemoryRequirements);
			#endif
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			GetImageSparseMemoryRequirements2Native(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, Span<VkImageSparseMemoryRequirementsInfo2> pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				GetImageSparseMemoryRequirements2Native(device, ppInfo0, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				GetImageSparseMemoryRequirements2Native(device, ppInfo0, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, Span<uint> pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = pSparseMemoryRequirementCount)
			{
				GetImageSparseMemoryRequirements2Native(device, pInfo, ppSparseMemoryRequirementCount0, pSparseMemoryRequirements);
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, ref uint pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = &pSparseMemoryRequirementCount)
			{
				GetImageSparseMemoryRequirements2Native(device, pInfo, ppSparseMemoryRequirementCount0, pSparseMemoryRequirements);
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, Span<VkImageSparseMemoryRequirementsInfo2> pInfo, Span<uint> pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = pSparseMemoryRequirementCount)
				{
					GetImageSparseMemoryRequirements2Native(device, ppInfo0, ppSparseMemoryRequirementCount1, pSparseMemoryRequirements);
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = &pSparseMemoryRequirementCount)
				{
					GetImageSparseMemoryRequirements2Native(device, ppInfo0, ppSparseMemoryRequirementCount1, pSparseMemoryRequirements);
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements0 = pSparseMemoryRequirements)
			{
				GetImageSparseMemoryRequirements2Native(device, pInfo, pSparseMemoryRequirementCount, ppSparseMemoryRequirements0);
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements0 = &pSparseMemoryRequirements)
			{
				GetImageSparseMemoryRequirements2Native(device, pInfo, pSparseMemoryRequirementCount, ppSparseMemoryRequirements0);
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, Span<VkImageSparseMemoryRequirementsInfo2> pInfo, uint* pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = pSparseMemoryRequirements)
				{
					GetImageSparseMemoryRequirements2Native(device, ppInfo0, pSparseMemoryRequirementCount, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 pInfo, uint* pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = &pSparseMemoryRequirements)
				{
					GetImageSparseMemoryRequirements2Native(device, ppInfo0, pSparseMemoryRequirementCount, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, Span<uint> pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = pSparseMemoryRequirementCount)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = pSparseMemoryRequirements)
				{
					GetImageSparseMemoryRequirements2Native(device, pInfo, ppSparseMemoryRequirementCount0, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = &pSparseMemoryRequirementCount)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = &pSparseMemoryRequirements)
				{
					GetImageSparseMemoryRequirements2Native(device, pInfo, ppSparseMemoryRequirementCount0, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, Span<VkImageSparseMemoryRequirementsInfo2> pInfo, Span<uint> pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = pSparseMemoryRequirementCount)
				{
					fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements2 = pSparseMemoryRequirements)
					{
						GetImageSparseMemoryRequirements2Native(device, ppInfo0, ppSparseMemoryRequirementCount1, ppSparseMemoryRequirements2);
					}
				}
			}
		}

		public void GetImageSparseMemoryRequirements2(VkDevice device, ref VkImageSparseMemoryRequirementsInfo2 pInfo, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (VkImageSparseMemoryRequirementsInfo2* ppInfo0 = &pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = &pSparseMemoryRequirementCount)
				{
					fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements2 = &pSparseMemoryRequirements)
					{
						GetImageSparseMemoryRequirements2Native(device, ppInfo0, ppSparseMemoryRequirementCount1, ppSparseMemoryRequirements2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceBufferMemoryRequirementsNative(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void>)funcTable[135])(device, pInfo, pMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[135])(device, (nint)pInfo, (nint)pMemoryRequirements);
			#endif
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			GetDeviceBufferMemoryRequirementsNative(device, pInfo, pMemoryRequirements);
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, Span<VkDeviceBufferMemoryRequirements> pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkDeviceBufferMemoryRequirements* ppInfo0 = pInfo)
			{
				GetDeviceBufferMemoryRequirementsNative(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, ref VkDeviceBufferMemoryRequirements pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkDeviceBufferMemoryRequirements* ppInfo0 = &pInfo)
			{
				GetDeviceBufferMemoryRequirementsNative(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = pMemoryRequirements)
			{
				GetDeviceBufferMemoryRequirementsNative(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = &pMemoryRequirements)
			{
				GetDeviceBufferMemoryRequirementsNative(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, Span<VkDeviceBufferMemoryRequirements> pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkDeviceBufferMemoryRequirements* ppInfo0 = pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = pMemoryRequirements)
				{
					GetDeviceBufferMemoryRequirementsNative(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		public void GetDeviceBufferMemoryRequirements(VkDevice device, ref VkDeviceBufferMemoryRequirements pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkDeviceBufferMemoryRequirements* ppInfo0 = &pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = &pMemoryRequirements)
				{
					GetDeviceBufferMemoryRequirementsNative(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceImageMemoryRequirementsNative(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void>)funcTable[136])(device, pInfo, pMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[136])(device, (nint)pInfo, (nint)pMemoryRequirements);
			#endif
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			GetDeviceImageMemoryRequirementsNative(device, pInfo, pMemoryRequirements);
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, Span<VkDeviceImageMemoryRequirements> pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = pInfo)
			{
				GetDeviceImageMemoryRequirementsNative(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements pInfo, VkMemoryRequirements2* pMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = &pInfo)
			{
				GetDeviceImageMemoryRequirementsNative(device, ppInfo0, pMemoryRequirements);
			}
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = pMemoryRequirements)
			{
				GetDeviceImageMemoryRequirementsNative(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkMemoryRequirements2* ppMemoryRequirements0 = &pMemoryRequirements)
			{
				GetDeviceImageMemoryRequirementsNative(device, pInfo, ppMemoryRequirements0);
			}
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, Span<VkDeviceImageMemoryRequirements> pInfo, Span<VkMemoryRequirements2> pMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = pMemoryRequirements)
				{
					GetDeviceImageMemoryRequirementsNative(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		public void GetDeviceImageMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements pInfo, ref VkMemoryRequirements2 pMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = &pInfo)
			{
				fixed (VkMemoryRequirements2* ppMemoryRequirements1 = &pMemoryRequirements)
				{
					GetDeviceImageMemoryRequirementsNative(device, ppInfo0, ppMemoryRequirements1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceImageSparseMemoryRequirementsNative(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void>)funcTable[137])(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, void>)funcTable[137])(device, (nint)pInfo, (nint)pSparseMemoryRequirementCount, (nint)pSparseMemoryRequirements);
			#endif
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, Span<VkDeviceImageMemoryRequirements> pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = pInfo)
			{
				GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = &pInfo)
			{
				GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, Span<uint> pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = pSparseMemoryRequirementCount)
			{
				GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, ppSparseMemoryRequirementCount0, pSparseMemoryRequirements);
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, ref uint pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = &pSparseMemoryRequirementCount)
			{
				GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, ppSparseMemoryRequirementCount0, pSparseMemoryRequirements);
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, Span<VkDeviceImageMemoryRequirements> pInfo, Span<uint> pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = pSparseMemoryRequirementCount)
				{
					GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, ppSparseMemoryRequirementCount1, pSparseMemoryRequirements);
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements pInfo, ref uint pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = &pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = &pSparseMemoryRequirementCount)
				{
					GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, ppSparseMemoryRequirementCount1, pSparseMemoryRequirements);
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements0 = pSparseMemoryRequirements)
			{
				GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, pSparseMemoryRequirementCount, ppSparseMemoryRequirements0);
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements0 = &pSparseMemoryRequirements)
			{
				GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, pSparseMemoryRequirementCount, ppSparseMemoryRequirements0);
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, Span<VkDeviceImageMemoryRequirements> pInfo, uint* pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = pInfo)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = pSparseMemoryRequirements)
				{
					GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, pSparseMemoryRequirementCount, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements pInfo, uint* pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = &pInfo)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = &pSparseMemoryRequirements)
				{
					GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, pSparseMemoryRequirementCount, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, Span<uint> pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = pSparseMemoryRequirementCount)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = pSparseMemoryRequirements)
				{
					GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, ppSparseMemoryRequirementCount0, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = &pSparseMemoryRequirementCount)
			{
				fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements1 = &pSparseMemoryRequirements)
				{
					GetDeviceImageSparseMemoryRequirementsNative(device, pInfo, ppSparseMemoryRequirementCount0, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, Span<VkDeviceImageMemoryRequirements> pInfo, Span<uint> pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements2> pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = pSparseMemoryRequirementCount)
				{
					fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements2 = pSparseMemoryRequirements)
					{
						GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, ppSparseMemoryRequirementCount1, ppSparseMemoryRequirements2);
					}
				}
			}
		}

		public void GetDeviceImageSparseMemoryRequirements(VkDevice device, ref VkDeviceImageMemoryRequirements pInfo, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements2 pSparseMemoryRequirements)
		{
			fixed (VkDeviceImageMemoryRequirements* ppInfo0 = &pInfo)
			{
				fixed (uint* ppSparseMemoryRequirementCount1 = &pSparseMemoryRequirementCount)
				{
					fixed (VkSparseImageMemoryRequirements2* ppSparseMemoryRequirements2 = &pSparseMemoryRequirements)
					{
						GetDeviceImageSparseMemoryRequirementsNative(device, ppInfo0, ppSparseMemoryRequirementCount1, ppSparseMemoryRequirements2);
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateSamplerYcbcrConversionNative(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)funcTable[138])(device, pCreateInfo, pAllocator, pYcbcrConversion);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[138])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pYcbcrConversion);
			#endif
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, pAllocator, pYcbcrConversion);
			return ret;
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, Span<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, pAllocator, pYcbcrConversion);
				return ret;
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, pAllocator, pYcbcrConversion);
				return ret;
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, ppAllocator0, pYcbcrConversion);
				return ret;
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, ppAllocator0, pYcbcrConversion);
				return ret;
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, Span<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, ppAllocator1, pYcbcrConversion);
					return ret;
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, ppAllocator1, pYcbcrConversion);
					return ret;
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkSamplerYcbcrConversion> pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversion* ppYcbcrConversion0 = pYcbcrConversion)
			{
				VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, pAllocator, ppYcbcrConversion0);
				return ret;
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSamplerYcbcrConversion pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversion* ppYcbcrConversion0 = &pYcbcrConversion)
			{
				VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, pAllocator, ppYcbcrConversion0);
				return ret;
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, Span<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkSamplerYcbcrConversion> pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkSamplerYcbcrConversion* ppYcbcrConversion1 = pYcbcrConversion)
				{
					VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, pAllocator, ppYcbcrConversion1);
					return ret;
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSamplerYcbcrConversion pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkSamplerYcbcrConversion* ppYcbcrConversion1 = &pYcbcrConversion)
				{
					VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, pAllocator, ppYcbcrConversion1);
					return ret;
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkSamplerYcbcrConversion> pYcbcrConversion)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkSamplerYcbcrConversion* ppYcbcrConversion1 = pYcbcrConversion)
				{
					VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, ppAllocator0, ppYcbcrConversion1);
					return ret;
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkSamplerYcbcrConversion pYcbcrConversion)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkSamplerYcbcrConversion* ppYcbcrConversion1 = &pYcbcrConversion)
				{
					VkResult ret = CreateSamplerYcbcrConversionNative(device, pCreateInfo, ppAllocator0, ppYcbcrConversion1);
					return ret;
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, Span<VkSamplerYcbcrConversionCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkSamplerYcbcrConversion> pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkSamplerYcbcrConversion* ppYcbcrConversion2 = pYcbcrConversion)
					{
						VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, ppAllocator1, ppYcbcrConversion2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateSamplerYcbcrConversion(VkDevice device, ref VkSamplerYcbcrConversionCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkSamplerYcbcrConversion pYcbcrConversion)
		{
			fixed (VkSamplerYcbcrConversionCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkSamplerYcbcrConversion* ppYcbcrConversion2 = &pYcbcrConversion)
					{
						VkResult ret = CreateSamplerYcbcrConversionNative(device, ppCreateInfo0, ppAllocator1, ppYcbcrConversion2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroySamplerYcbcrConversionNative(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)funcTable[139])(device, ycbcrConversion, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkSamplerYcbcrConversion, nint, void>)funcTable[139])(device, ycbcrConversion, (nint)pAllocator);
			#endif
		}

		public void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)
		{
			DestroySamplerYcbcrConversionNative(device, ycbcrConversion, pAllocator);
		}

		public void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroySamplerYcbcrConversionNative(device, ycbcrConversion, ppAllocator0);
			}
		}

		public void DestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroySamplerYcbcrConversionNative(device, ycbcrConversion, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceQueue2Native(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceQueueInfo2*, VkQueue*, void>)funcTable[140])(device, pQueueInfo, pQueue);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[140])(device, (nint)pQueueInfo, (nint)pQueue);
			#endif
		}

		public void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)
		{
			GetDeviceQueue2Native(device, pQueueInfo, pQueue);
		}

		public void GetDeviceQueue2(VkDevice device, Span<VkDeviceQueueInfo2> pQueueInfo, VkQueue* pQueue)
		{
			fixed (VkDeviceQueueInfo2* ppQueueInfo0 = pQueueInfo)
			{
				GetDeviceQueue2Native(device, ppQueueInfo0, pQueue);
			}
		}

		public void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 pQueueInfo, VkQueue* pQueue)
		{
			fixed (VkDeviceQueueInfo2* ppQueueInfo0 = &pQueueInfo)
			{
				GetDeviceQueue2Native(device, ppQueueInfo0, pQueue);
			}
		}

		public void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, Span<VkQueue> pQueue)
		{
			fixed (VkQueue* ppQueue0 = pQueue)
			{
				GetDeviceQueue2Native(device, pQueueInfo, ppQueue0);
			}
		}

		public void GetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, ref VkQueue pQueue)
		{
			fixed (VkQueue* ppQueue0 = &pQueue)
			{
				GetDeviceQueue2Native(device, pQueueInfo, ppQueue0);
			}
		}

		public void GetDeviceQueue2(VkDevice device, Span<VkDeviceQueueInfo2> pQueueInfo, Span<VkQueue> pQueue)
		{
			fixed (VkDeviceQueueInfo2* ppQueueInfo0 = pQueueInfo)
			{
				fixed (VkQueue* ppQueue1 = pQueue)
				{
					GetDeviceQueue2Native(device, ppQueueInfo0, ppQueue1);
				}
			}
		}

		public void GetDeviceQueue2(VkDevice device, ref VkDeviceQueueInfo2 pQueueInfo, ref VkQueue pQueue)
		{
			fixed (VkDeviceQueueInfo2* ppQueueInfo0 = &pQueueInfo)
			{
				fixed (VkQueue* ppQueue1 = &pQueue)
				{
					GetDeviceQueue2Native(device, ppQueueInfo0, ppQueue1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDescriptorSetLayoutSupportNative(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)funcTable[141])(device, pCreateInfo, pSupport);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[141])(device, (nint)pCreateInfo, (nint)pSupport);
			#endif
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
		{
			GetDescriptorSetLayoutSupportNative(device, pCreateInfo, pSupport);
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, Span<VkDescriptorSetLayoutCreateInfo> pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				GetDescriptorSetLayoutSupportNative(device, ppCreateInfo0, pSupport);
			}
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				GetDescriptorSetLayoutSupportNative(device, ppCreateInfo0, pSupport);
			}
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, Span<VkDescriptorSetLayoutSupport> pSupport)
		{
			fixed (VkDescriptorSetLayoutSupport* ppSupport0 = pSupport)
			{
				GetDescriptorSetLayoutSupportNative(device, pCreateInfo, ppSupport0);
			}
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, ref VkDescriptorSetLayoutSupport pSupport)
		{
			fixed (VkDescriptorSetLayoutSupport* ppSupport0 = &pSupport)
			{
				GetDescriptorSetLayoutSupportNative(device, pCreateInfo, ppSupport0);
			}
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, Span<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Span<VkDescriptorSetLayoutSupport> pSupport)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkDescriptorSetLayoutSupport* ppSupport1 = pSupport)
				{
					GetDescriptorSetLayoutSupportNative(device, ppCreateInfo0, ppSupport1);
				}
			}
		}

		public void GetDescriptorSetLayoutSupport(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, ref VkDescriptorSetLayoutSupport pSupport)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkDescriptorSetLayoutSupport* ppSupport1 = &pSupport)
				{
					GetDescriptorSetLayoutSupportNative(device, ppCreateInfo0, ppSupport1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateRenderPass2Native(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)funcTable[142])(device, pCreateInfo, pAllocator, pRenderPass);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[142])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pRenderPass);
			#endif
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			VkResult ret = CreateRenderPass2Native(device, pCreateInfo, pAllocator, pRenderPass);
			return ret;
		}

		public VkResult CreateRenderPass2(VkDevice device, Span<VkRenderPassCreateInfo2> pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, pAllocator, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, pAllocator, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateRenderPass2Native(device, pCreateInfo, ppAllocator0, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateRenderPass2Native(device, pCreateInfo, ppAllocator0, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, Span<VkRenderPassCreateInfo2> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, ppAllocator1, pRenderPass);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 pCreateInfo, ref VkAllocationCallbacks pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, ppAllocator1, pRenderPass);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkRenderPass* ppRenderPass0 = pRenderPass)
			{
				VkResult ret = CreateRenderPass2Native(device, pCreateInfo, pAllocator, ppRenderPass0);
				return ret;
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkRenderPass* ppRenderPass0 = &pRenderPass)
			{
				VkResult ret = CreateRenderPass2Native(device, pCreateInfo, pAllocator, ppRenderPass0);
				return ret;
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, Span<VkRenderPassCreateInfo2> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkRenderPass* ppRenderPass1 = pRenderPass)
				{
					VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, pAllocator, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkRenderPass* ppRenderPass1 = &pRenderPass)
				{
					VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, pAllocator, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkRenderPass* ppRenderPass1 = pRenderPass)
				{
					VkResult ret = CreateRenderPass2Native(device, pCreateInfo, ppAllocator0, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkRenderPass* ppRenderPass1 = &pRenderPass)
				{
					VkResult ret = CreateRenderPass2Native(device, pCreateInfo, ppAllocator0, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, Span<VkRenderPassCreateInfo2> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkRenderPass* ppRenderPass2 = pRenderPass)
					{
						VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, ppAllocator1, ppRenderPass2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateRenderPass2(VkDevice device, ref VkRenderPassCreateInfo2 pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkRenderPassCreateInfo2* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkRenderPass* ppRenderPass2 = &pRenderPass)
					{
						VkResult ret = CreateRenderPass2Native(device, ppCreateInfo0, ppAllocator1, ppRenderPass2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBeginRenderPass2Native(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)funcTable[143])(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, nint, void>)funcTable[143])(commandBuffer, (nint)pRenderPassBegin, (nint)pSubpassBeginInfo);
			#endif
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
		{
			CmdBeginRenderPass2Native(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, Span<VkRenderPassBeginInfo> pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
		{
			fixed (VkRenderPassBeginInfo* ppRenderPassBegin0 = pRenderPassBegin)
			{
				CmdBeginRenderPass2Native(commandBuffer, ppRenderPassBegin0, pSubpassBeginInfo);
			}
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
		{
			fixed (VkRenderPassBeginInfo* ppRenderPassBegin0 = &pRenderPassBegin)
			{
				CmdBeginRenderPass2Native(commandBuffer, ppRenderPassBegin0, pSubpassBeginInfo);
			}
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, Span<VkSubpassBeginInfo> pSubpassBeginInfo)
		{
			fixed (VkSubpassBeginInfo* ppSubpassBeginInfo0 = pSubpassBeginInfo)
			{
				CmdBeginRenderPass2Native(commandBuffer, pRenderPassBegin, ppSubpassBeginInfo0);
			}
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, ref VkSubpassBeginInfo pSubpassBeginInfo)
		{
			fixed (VkSubpassBeginInfo* ppSubpassBeginInfo0 = &pSubpassBeginInfo)
			{
				CmdBeginRenderPass2Native(commandBuffer, pRenderPassBegin, ppSubpassBeginInfo0);
			}
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, Span<VkRenderPassBeginInfo> pRenderPassBegin, Span<VkSubpassBeginInfo> pSubpassBeginInfo)
		{
			fixed (VkRenderPassBeginInfo* ppRenderPassBegin0 = pRenderPassBegin)
			{
				fixed (VkSubpassBeginInfo* ppSubpassBeginInfo1 = pSubpassBeginInfo)
				{
					CmdBeginRenderPass2Native(commandBuffer, ppRenderPassBegin0, ppSubpassBeginInfo1);
				}
			}
		}

		public void CmdBeginRenderPass2(VkCommandBuffer commandBuffer, ref VkRenderPassBeginInfo pRenderPassBegin, ref VkSubpassBeginInfo pSubpassBeginInfo)
		{
			fixed (VkRenderPassBeginInfo* ppRenderPassBegin0 = &pRenderPassBegin)
			{
				fixed (VkSubpassBeginInfo* ppSubpassBeginInfo1 = &pSubpassBeginInfo)
				{
					CmdBeginRenderPass2Native(commandBuffer, ppRenderPassBegin0, ppSubpassBeginInfo1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdNextSubpass2Native(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)funcTable[144])(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, nint, void>)funcTable[144])(commandBuffer, (nint)pSubpassBeginInfo, (nint)pSubpassEndInfo);
			#endif
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
		{
			CmdNextSubpass2Native(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, Span<VkSubpassBeginInfo> pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
		{
			fixed (VkSubpassBeginInfo* ppSubpassBeginInfo0 = pSubpassBeginInfo)
			{
				CmdNextSubpass2Native(commandBuffer, ppSubpassBeginInfo0, pSubpassEndInfo);
			}
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
		{
			fixed (VkSubpassBeginInfo* ppSubpassBeginInfo0 = &pSubpassBeginInfo)
			{
				CmdNextSubpass2Native(commandBuffer, ppSubpassBeginInfo0, pSubpassEndInfo);
			}
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, Span<VkSubpassEndInfo> pSubpassEndInfo)
		{
			fixed (VkSubpassEndInfo* ppSubpassEndInfo0 = pSubpassEndInfo)
			{
				CmdNextSubpass2Native(commandBuffer, pSubpassBeginInfo, ppSubpassEndInfo0);
			}
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, ref VkSubpassEndInfo pSubpassEndInfo)
		{
			fixed (VkSubpassEndInfo* ppSubpassEndInfo0 = &pSubpassEndInfo)
			{
				CmdNextSubpass2Native(commandBuffer, pSubpassBeginInfo, ppSubpassEndInfo0);
			}
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, Span<VkSubpassBeginInfo> pSubpassBeginInfo, Span<VkSubpassEndInfo> pSubpassEndInfo)
		{
			fixed (VkSubpassBeginInfo* ppSubpassBeginInfo0 = pSubpassBeginInfo)
			{
				fixed (VkSubpassEndInfo* ppSubpassEndInfo1 = pSubpassEndInfo)
				{
					CmdNextSubpass2Native(commandBuffer, ppSubpassBeginInfo0, ppSubpassEndInfo1);
				}
			}
		}

		public void CmdNextSubpass2(VkCommandBuffer commandBuffer, ref VkSubpassBeginInfo pSubpassBeginInfo, ref VkSubpassEndInfo pSubpassEndInfo)
		{
			fixed (VkSubpassBeginInfo* ppSubpassBeginInfo0 = &pSubpassBeginInfo)
			{
				fixed (VkSubpassEndInfo* ppSubpassEndInfo1 = &pSubpassEndInfo)
				{
					CmdNextSubpass2Native(commandBuffer, ppSubpassBeginInfo0, ppSubpassEndInfo1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdEndRenderPass2Native(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkSubpassEndInfo*, void>)funcTable[145])(commandBuffer, pSubpassEndInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[145])(commandBuffer, (nint)pSubpassEndInfo);
			#endif
		}

		public void CmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
		{
			CmdEndRenderPass2Native(commandBuffer, pSubpassEndInfo);
		}

		public void CmdEndRenderPass2(VkCommandBuffer commandBuffer, Span<VkSubpassEndInfo> pSubpassEndInfo)
		{
			fixed (VkSubpassEndInfo* ppSubpassEndInfo0 = pSubpassEndInfo)
			{
				CmdEndRenderPass2Native(commandBuffer, ppSubpassEndInfo0);
			}
		}

		public void CmdEndRenderPass2(VkCommandBuffer commandBuffer, ref VkSubpassEndInfo pSubpassEndInfo)
		{
			fixed (VkSubpassEndInfo* ppSubpassEndInfo0 = &pSubpassEndInfo)
			{
				CmdEndRenderPass2Native(commandBuffer, ppSubpassEndInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult GetSemaphoreCounterValueNative(VkDevice device, VkSemaphore semaphore, ulong* pValue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, ulong*, VkResult>)funcTable[146])(device, semaphore, pValue);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, nint, VkResult>)funcTable[146])(device, semaphore, (nint)pValue);
			#endif
		}

		public VkResult GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong* pValue)
		{
			VkResult ret = GetSemaphoreCounterValueNative(device, semaphore, pValue);
			return ret;
		}

		public VkResult GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, Span<ulong> pValue)
		{
			fixed (ulong* ppValue0 = pValue)
			{
				VkResult ret = GetSemaphoreCounterValueNative(device, semaphore, ppValue0);
				return ret;
			}
		}

		public VkResult GetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ref ulong pValue)
		{
			fixed (ulong* ppValue0 = &pValue)
			{
				VkResult ret = GetSemaphoreCounterValueNative(device, semaphore, ppValue0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult WaitSemaphoresNative(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)funcTable[147])(device, pWaitInfo, timeout);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, ulong, VkResult>)funcTable[147])(device, (nint)pWaitInfo, timeout);
			#endif
		}

		public VkResult WaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
		{
			VkResult ret = WaitSemaphoresNative(device, pWaitInfo, timeout);
			return ret;
		}

		public VkResult WaitSemaphores(VkDevice device, Span<VkSemaphoreWaitInfo> pWaitInfo, ulong timeout)
		{
			fixed (VkSemaphoreWaitInfo* ppWaitInfo0 = pWaitInfo)
			{
				VkResult ret = WaitSemaphoresNative(device, ppWaitInfo0, timeout);
				return ret;
			}
		}

		public VkResult WaitSemaphores(VkDevice device, ref VkSemaphoreWaitInfo pWaitInfo, ulong timeout)
		{
			fixed (VkSemaphoreWaitInfo* ppWaitInfo0 = &pWaitInfo)
			{
				VkResult ret = WaitSemaphoresNative(device, ppWaitInfo0, timeout);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult SignalSemaphoreNative(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreSignalInfo*, VkResult>)funcTable[148])(device, pSignalInfo);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, VkResult>)funcTable[148])(device, (nint)pSignalInfo);
			#endif
		}

		public VkResult SignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)
		{
			VkResult ret = SignalSemaphoreNative(device, pSignalInfo);
			return ret;
		}

		public VkResult SignalSemaphore(VkDevice device, Span<VkSemaphoreSignalInfo> pSignalInfo)
		{
			fixed (VkSemaphoreSignalInfo* ppSignalInfo0 = pSignalInfo)
			{
				VkResult ret = SignalSemaphoreNative(device, ppSignalInfo0);
				return ret;
			}
		}

		public VkResult SignalSemaphore(VkDevice device, ref VkSemaphoreSignalInfo pSignalInfo)
		{
			fixed (VkSemaphoreSignalInfo* ppSignalInfo0 = &pSignalInfo)
			{
				VkResult ret = SignalSemaphoreNative(device, ppSignalInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDrawIndirectCountNative(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[149])(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[149])(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			#endif
		}

		public void CmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		{
			CmdDrawIndirectCountNative(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdDrawIndexedIndirectCountNative(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[150])(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)funcTable[150])(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			#endif
		}

		public void CmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
		{
			CmdDrawIndexedIndirectCountNative(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal ulong GetBufferOpaqueCaptureAddressNative(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkBufferDeviceAddressInfo*, ulong>)funcTable[151])(device, pInfo);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<VkDevice, nint, ulong>)funcTable[151])(device, (nint)pInfo);
			#endif
		}

		public ulong GetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
		{
			ulong ret = GetBufferOpaqueCaptureAddressNative(device, pInfo);
			return ret;
		}

		public ulong GetBufferOpaqueCaptureAddress(VkDevice device, Span<VkBufferDeviceAddressInfo> pInfo)
		{
			fixed (VkBufferDeviceAddressInfo* ppInfo0 = pInfo)
			{
				ulong ret = GetBufferOpaqueCaptureAddressNative(device, ppInfo0);
				return ret;
			}
		}

		public ulong GetBufferOpaqueCaptureAddress(VkDevice device, ref VkBufferDeviceAddressInfo pInfo)
		{
			fixed (VkBufferDeviceAddressInfo* ppInfo0 = &pInfo)
			{
				ulong ret = GetBufferOpaqueCaptureAddressNative(device, ppInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkDeviceAddress GetBufferDeviceAddressNative(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress>)funcTable[152])(device, pInfo);
			#else
			return (VkDeviceAddress)((delegate* unmanaged[Cdecl]<VkDevice, nint, VkDeviceAddress>)funcTable[152])(device, (nint)pInfo);
			#endif
		}

		public VkDeviceAddress GetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
		{
			VkDeviceAddress ret = GetBufferDeviceAddressNative(device, pInfo);
			return ret;
		}

		public VkDeviceAddress GetBufferDeviceAddress(VkDevice device, Span<VkBufferDeviceAddressInfo> pInfo)
		{
			fixed (VkBufferDeviceAddressInfo* ppInfo0 = pInfo)
			{
				VkDeviceAddress ret = GetBufferDeviceAddressNative(device, ppInfo0);
				return ret;
			}
		}

		public VkDeviceAddress GetBufferDeviceAddress(VkDevice device, ref VkBufferDeviceAddressInfo pInfo)
		{
			fixed (VkBufferDeviceAddressInfo* ppInfo0 = &pInfo)
			{
				VkDeviceAddress ret = GetBufferDeviceAddressNative(device, ppInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal ulong GetDeviceMemoryOpaqueCaptureAddressNative(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)funcTable[153])(device, pInfo);
			#else
			return (ulong)((delegate* unmanaged[Cdecl]<VkDevice, nint, ulong>)funcTable[153])(device, (nint)pInfo);
			#endif
		}

		public ulong GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
		{
			ulong ret = GetDeviceMemoryOpaqueCaptureAddressNative(device, pInfo);
			return ret;
		}

		public ulong GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, Span<VkDeviceMemoryOpaqueCaptureAddressInfo> pInfo)
		{
			fixed (VkDeviceMemoryOpaqueCaptureAddressInfo* ppInfo0 = pInfo)
			{
				ulong ret = GetDeviceMemoryOpaqueCaptureAddressNative(device, ppInfo0);
				return ret;
			}
		}

		public ulong GetDeviceMemoryOpaqueCaptureAddress(VkDevice device, ref VkDeviceMemoryOpaqueCaptureAddressInfo pInfo)
		{
			fixed (VkDeviceMemoryOpaqueCaptureAddressInfo* ppInfo0 = &pInfo)
			{
				ulong ret = GetDeviceMemoryOpaqueCaptureAddressNative(device, ppInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetLineStippleNative(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ushort, void>)funcTable[154])(commandBuffer, lineStippleFactor, lineStipplePattern);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, ushort, void>)funcTable[154])(commandBuffer, lineStippleFactor, lineStipplePattern);
			#endif
		}

		public void CmdSetLineStipple(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
		{
			CmdSetLineStippleNative(commandBuffer, lineStippleFactor, lineStipplePattern);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetCullModeNative(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCullModeFlags, void>)funcTable[155])(commandBuffer, cullMode);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCullModeFlags, void>)funcTable[155])(commandBuffer, cullMode);
			#endif
		}

		public void CmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
		{
			CmdSetCullModeNative(commandBuffer, cullMode);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetFrontFaceNative(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFrontFace, void>)funcTable[156])(commandBuffer, frontFace);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkFrontFace, void>)funcTable[156])(commandBuffer, frontFace);
			#endif
		}

		public void CmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
		{
			CmdSetFrontFaceNative(commandBuffer, frontFace);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetPrimitiveTopologyNative(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPrimitiveTopology, void>)funcTable[157])(commandBuffer, primitiveTopology);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPrimitiveTopology, void>)funcTable[157])(commandBuffer, primitiveTopology);
			#endif
		}

		public void CmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
		{
			CmdSetPrimitiveTopologyNative(commandBuffer, primitiveTopology);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetViewportWithCountNative(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* pViewports)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkViewport*, void>)funcTable[158])(commandBuffer, viewportCount, pViewports);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, nint, void>)funcTable[158])(commandBuffer, viewportCount, (nint)pViewports);
			#endif
		}

		public void CmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* pViewports)
		{
			CmdSetViewportWithCountNative(commandBuffer, viewportCount, pViewports);
		}

		public void CmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint viewportCount, Span<VkViewport> pViewports)
		{
			fixed (VkViewport* ppViewports0 = pViewports)
			{
				CmdSetViewportWithCountNative(commandBuffer, viewportCount, ppViewports0);
			}
		}

		public void CmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint viewportCount, ref VkViewport pViewports)
		{
			fixed (VkViewport* ppViewports0 = &pViewports)
			{
				CmdSetViewportWithCountNative(commandBuffer, viewportCount, ppViewports0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetScissorWithCountNative(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* pScissors)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkRect2D*, void>)funcTable[159])(commandBuffer, scissorCount, pScissors);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, nint, void>)funcTable[159])(commandBuffer, scissorCount, (nint)pScissors);
			#endif
		}

		public void CmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* pScissors)
		{
			CmdSetScissorWithCountNative(commandBuffer, scissorCount, pScissors);
		}

		public void CmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint scissorCount, Span<VkRect2D> pScissors)
		{
			fixed (VkRect2D* ppScissors0 = pScissors)
			{
				CmdSetScissorWithCountNative(commandBuffer, scissorCount, ppScissors0);
			}
		}

		public void CmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint scissorCount, ref VkRect2D pScissors)
		{
			fixed (VkRect2D* ppScissors0 = &pScissors)
			{
				CmdSetScissorWithCountNative(commandBuffer, scissorCount, ppScissors0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindIndexBuffer2Native(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType, void>)funcTable[160])(commandBuffer, buffer, offset, size, indexType);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, VkIndexType, void>)funcTable[160])(commandBuffer, buffer, offset, size, indexType);
			#endif
		}

		public void CmdBindIndexBuffer2(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType)
		{
			CmdBindIndexBuffer2Native(commandBuffer, buffer, offset, size, indexType);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindVertexBuffers2Native(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)funcTable[161])(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, uint, nint, nint, nint, nint, void>)funcTable[161])(commandBuffer, firstBinding, bindingCount, (nint)pBuffers, (nint)pOffsets, (nint)pSizes, (nint)pStrides);
			#endif
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, pSizes, pStrides);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, pSizes, pStrides);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, Span<VkDeviceSize> pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = pOffsets)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, pSizes, pStrides);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, ref VkDeviceSize pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = &pOffsets)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, pSizes, pStrides);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, Span<VkDeviceSize> pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = pOffsets)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, pSizes, pStrides);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, ref VkDeviceSize pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = &pOffsets)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, pSizes, pStrides);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, Span<VkDeviceSize> pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkDeviceSize* ppSizes0 = pSizes)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, ppSizes0, pStrides);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, ref VkDeviceSize pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkDeviceSize* ppSizes0 = &pSizes)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, ppSizes0, pStrides);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, VkDeviceSize* pOffsets, Span<VkDeviceSize> pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppSizes1 = pSizes)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, ppSizes1, pStrides);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, VkDeviceSize* pOffsets, ref VkDeviceSize pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppSizes1 = &pSizes)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, ppSizes1, pStrides);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, Span<VkDeviceSize> pOffsets, Span<VkDeviceSize> pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = pOffsets)
			{
				fixed (VkDeviceSize* ppSizes1 = pSizes)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, ppSizes1, pStrides);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, ref VkDeviceSize pOffsets, ref VkDeviceSize pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = &pOffsets)
			{
				fixed (VkDeviceSize* ppSizes1 = &pSizes)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, ppSizes1, pStrides);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, Span<VkDeviceSize> pOffsets, Span<VkDeviceSize> pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = pOffsets)
				{
					fixed (VkDeviceSize* ppSizes2 = pSizes)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, ppSizes2, pStrides);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, ref VkDeviceSize pOffsets, ref VkDeviceSize pSizes, VkDeviceSize* pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = &pOffsets)
				{
					fixed (VkDeviceSize* ppSizes2 = &pSizes)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, ppSizes2, pStrides);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkDeviceSize* ppStrides0 = pStrides)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, ppStrides0);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkDeviceSize* ppStrides0 = &pStrides)
			{
				CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, ppStrides0);
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppStrides1 = pStrides)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, pSizes, ppStrides1);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppStrides1 = &pStrides)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, pSizes, ppStrides1);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, Span<VkDeviceSize> pOffsets, VkDeviceSize* pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = pOffsets)
			{
				fixed (VkDeviceSize* ppStrides1 = pStrides)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, pSizes, ppStrides1);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, ref VkDeviceSize pOffsets, VkDeviceSize* pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = &pOffsets)
			{
				fixed (VkDeviceSize* ppStrides1 = &pStrides)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, pSizes, ppStrides1);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, Span<VkDeviceSize> pOffsets, VkDeviceSize* pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = pOffsets)
				{
					fixed (VkDeviceSize* ppStrides2 = pStrides)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, pSizes, ppStrides2);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, ref VkDeviceSize pOffsets, VkDeviceSize* pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = &pOffsets)
				{
					fixed (VkDeviceSize* ppStrides2 = &pStrides)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, pSizes, ppStrides2);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, Span<VkDeviceSize> pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkDeviceSize* ppSizes0 = pSizes)
			{
				fixed (VkDeviceSize* ppStrides1 = pStrides)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, ppSizes0, ppStrides1);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, ref VkDeviceSize pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkDeviceSize* ppSizes0 = &pSizes)
			{
				fixed (VkDeviceSize* ppStrides1 = &pStrides)
				{
					CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, ppSizes0, ppStrides1);
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, VkDeviceSize* pOffsets, Span<VkDeviceSize> pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppSizes1 = pSizes)
				{
					fixed (VkDeviceSize* ppStrides2 = pStrides)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, ppSizes1, ppStrides2);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, VkDeviceSize* pOffsets, ref VkDeviceSize pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppSizes1 = &pSizes)
				{
					fixed (VkDeviceSize* ppStrides2 = &pStrides)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, pOffsets, ppSizes1, ppStrides2);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, Span<VkDeviceSize> pOffsets, Span<VkDeviceSize> pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = pOffsets)
			{
				fixed (VkDeviceSize* ppSizes1 = pSizes)
				{
					fixed (VkDeviceSize* ppStrides2 = pStrides)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, ppSizes1, ppStrides2);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, ref VkDeviceSize pOffsets, ref VkDeviceSize pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkDeviceSize* ppOffsets0 = &pOffsets)
			{
				fixed (VkDeviceSize* ppSizes1 = &pSizes)
				{
					fixed (VkDeviceSize* ppStrides2 = &pStrides)
					{
						CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, pBuffers, ppOffsets0, ppSizes1, ppStrides2);
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, Span<VkBuffer> pBuffers, Span<VkDeviceSize> pOffsets, Span<VkDeviceSize> pSizes, Span<VkDeviceSize> pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = pOffsets)
				{
					fixed (VkDeviceSize* ppSizes2 = pSizes)
					{
						fixed (VkDeviceSize* ppStrides3 = pStrides)
						{
							CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, ppSizes2, ppStrides3);
						}
					}
				}
			}
		}

		public void CmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, ref VkBuffer pBuffers, ref VkDeviceSize pOffsets, ref VkDeviceSize pSizes, ref VkDeviceSize pStrides)
		{
			fixed (VkBuffer* ppBuffers0 = &pBuffers)
			{
				fixed (VkDeviceSize* ppOffsets1 = &pOffsets)
				{
					fixed (VkDeviceSize* ppSizes2 = &pSizes)
					{
						fixed (VkDeviceSize* ppStrides3 = &pStrides)
						{
							CmdBindVertexBuffers2Native(commandBuffer, firstBinding, bindingCount, ppBuffers0, ppOffsets1, ppSizes2, ppStrides3);
						}
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthTestEnableNative(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[162])(commandBuffer, depthTestEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[162])(commandBuffer, depthTestEnable);
			#endif
		}

		public void CmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
		{
			CmdSetDepthTestEnableNative(commandBuffer, depthTestEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthWriteEnableNative(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[163])(commandBuffer, depthWriteEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[163])(commandBuffer, depthWriteEnable);
			#endif
		}

		public void CmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
		{
			CmdSetDepthWriteEnableNative(commandBuffer, depthWriteEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthCompareOpNative(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCompareOp, void>)funcTable[164])(commandBuffer, depthCompareOp);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCompareOp, void>)funcTable[164])(commandBuffer, depthCompareOp);
			#endif
		}

		public void CmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
		{
			CmdSetDepthCompareOpNative(commandBuffer, depthCompareOp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthBoundsTestEnableNative(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[165])(commandBuffer, depthBoundsTestEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[165])(commandBuffer, depthBoundsTestEnable);
			#endif
		}

		public void CmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
		{
			CmdSetDepthBoundsTestEnableNative(commandBuffer, depthBoundsTestEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetStencilTestEnableNative(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[166])(commandBuffer, stencilTestEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[166])(commandBuffer, stencilTestEnable);
			#endif
		}

		public void CmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
		{
			CmdSetStencilTestEnableNative(commandBuffer, stencilTestEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetStencilOpNative(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)funcTable[167])(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)funcTable[167])(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
			#endif
		}

		public void CmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
		{
			CmdSetStencilOpNative(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetRasterizerDiscardEnableNative(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[168])(commandBuffer, rasterizerDiscardEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[168])(commandBuffer, rasterizerDiscardEnable);
			#endif
		}

		public void CmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
		{
			CmdSetRasterizerDiscardEnableNative(commandBuffer, rasterizerDiscardEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetDepthBiasEnableNative(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[169])(commandBuffer, depthBiasEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[169])(commandBuffer, depthBiasEnable);
			#endif
		}

		public void CmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
		{
			CmdSetDepthBiasEnableNative(commandBuffer, depthBiasEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetPrimitiveRestartEnableNative(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[170])(commandBuffer, primitiveRestartEnable);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBool32, void>)funcTable[170])(commandBuffer, primitiveRestartEnable);
			#endif
		}

		public void CmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
		{
			CmdSetPrimitiveRestartEnableNative(commandBuffer, primitiveRestartEnable);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreatePrivateDataSlotNative(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)funcTable[171])(device, pCreateInfo, pAllocator, pPrivateDataSlot);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[171])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pPrivateDataSlot);
			#endif
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, pAllocator, pPrivateDataSlot);
			return ret;
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, Span<VkPrivateDataSlotCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, pAllocator, pPrivateDataSlot);
				return ret;
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, ref VkPrivateDataSlotCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, pAllocator, pPrivateDataSlot);
				return ret;
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, ppAllocator0, pPrivateDataSlot);
				return ret;
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, ppAllocator0, pPrivateDataSlot);
				return ret;
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, Span<VkPrivateDataSlotCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, ppAllocator1, pPrivateDataSlot);
					return ret;
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, ref VkPrivateDataSlotCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, ppAllocator1, pPrivateDataSlot);
					return ret;
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkPrivateDataSlot> pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlot* ppPrivateDataSlot0 = pPrivateDataSlot)
			{
				VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, pAllocator, ppPrivateDataSlot0);
				return ret;
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPrivateDataSlot pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlot* ppPrivateDataSlot0 = &pPrivateDataSlot)
			{
				VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, pAllocator, ppPrivateDataSlot0);
				return ret;
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, Span<VkPrivateDataSlotCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkPrivateDataSlot> pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkPrivateDataSlot* ppPrivateDataSlot1 = pPrivateDataSlot)
				{
					VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, pAllocator, ppPrivateDataSlot1);
					return ret;
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, ref VkPrivateDataSlotCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPrivateDataSlot pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkPrivateDataSlot* ppPrivateDataSlot1 = &pPrivateDataSlot)
				{
					VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, pAllocator, ppPrivateDataSlot1);
					return ret;
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkPrivateDataSlot> pPrivateDataSlot)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkPrivateDataSlot* ppPrivateDataSlot1 = pPrivateDataSlot)
				{
					VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, ppAllocator0, ppPrivateDataSlot1);
					return ret;
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkPrivateDataSlot pPrivateDataSlot)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkPrivateDataSlot* ppPrivateDataSlot1 = &pPrivateDataSlot)
				{
					VkResult ret = CreatePrivateDataSlotNative(device, pCreateInfo, ppAllocator0, ppPrivateDataSlot1);
					return ret;
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, Span<VkPrivateDataSlotCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkPrivateDataSlot> pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkPrivateDataSlot* ppPrivateDataSlot2 = pPrivateDataSlot)
					{
						VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, ppAllocator1, ppPrivateDataSlot2);
						return ret;
					}
				}
			}
		}

		public VkResult CreatePrivateDataSlot(VkDevice device, ref VkPrivateDataSlotCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkPrivateDataSlot pPrivateDataSlot)
		{
			fixed (VkPrivateDataSlotCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkPrivateDataSlot* ppPrivateDataSlot2 = &pPrivateDataSlot)
					{
						VkResult ret = CreatePrivateDataSlotNative(device, ppCreateInfo0, ppAllocator1, ppPrivateDataSlot2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyPrivateDataSlotNative(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)funcTable[172])(device, privateDataSlot, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkPrivateDataSlot, nint, void>)funcTable[172])(device, privateDataSlot, (nint)pAllocator);
			#endif
		}

		public void DestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)
		{
			DestroyPrivateDataSlotNative(device, privateDataSlot, pAllocator);
		}

		public void DestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyPrivateDataSlotNative(device, privateDataSlot, ppAllocator0);
			}
		}

		public void DestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyPrivateDataSlotNative(device, privateDataSlot, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult SetPrivateDataNative(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)funcTable[173])(device, objectType, objectHandle, privateDataSlot, data);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)funcTable[173])(device, objectType, objectHandle, privateDataSlot, data);
			#endif
		}

		public VkResult SetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data)
		{
			VkResult ret = SetPrivateDataNative(device, objectType, objectHandle, privateDataSlot, data);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetPrivateDataNative(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* pData)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void>)funcTable[174])(device, objectType, objectHandle, privateDataSlot, pData);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, nint, void>)funcTable[174])(device, objectType, objectHandle, privateDataSlot, (nint)pData);
			#endif
		}

		public void GetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* pData)
		{
			GetPrivateDataNative(device, objectType, objectHandle, privateDataSlot, pData);
		}

		public void GetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, Span<ulong> pData)
		{
			fixed (ulong* ppData0 = pData)
			{
				GetPrivateDataNative(device, objectType, objectHandle, privateDataSlot, ppData0);
			}
		}

		public void GetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ref ulong pData)
		{
			fixed (ulong* ppData0 = &pData)
			{
				GetPrivateDataNative(device, objectType, objectHandle, privateDataSlot, ppData0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyBuffer2Native(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferInfo2*, void>)funcTable[175])(commandBuffer, pCopyBufferInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[175])(commandBuffer, (nint)pCopyBufferInfo);
			#endif
		}

		public void CmdCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)
		{
			CmdCopyBuffer2Native(commandBuffer, pCopyBufferInfo);
		}

		public void CmdCopyBuffer2(VkCommandBuffer commandBuffer, Span<VkCopyBufferInfo2> pCopyBufferInfo)
		{
			fixed (VkCopyBufferInfo2* ppCopyBufferInfo0 = pCopyBufferInfo)
			{
				CmdCopyBuffer2Native(commandBuffer, ppCopyBufferInfo0);
			}
		}

		public void CmdCopyBuffer2(VkCommandBuffer commandBuffer, ref VkCopyBufferInfo2 pCopyBufferInfo)
		{
			fixed (VkCopyBufferInfo2* ppCopyBufferInfo0 = &pCopyBufferInfo)
			{
				CmdCopyBuffer2Native(commandBuffer, ppCopyBufferInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyImage2Native(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageInfo2*, void>)funcTable[176])(commandBuffer, pCopyImageInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[176])(commandBuffer, (nint)pCopyImageInfo);
			#endif
		}

		public void CmdCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)
		{
			CmdCopyImage2Native(commandBuffer, pCopyImageInfo);
		}

		public void CmdCopyImage2(VkCommandBuffer commandBuffer, Span<VkCopyImageInfo2> pCopyImageInfo)
		{
			fixed (VkCopyImageInfo2* ppCopyImageInfo0 = pCopyImageInfo)
			{
				CmdCopyImage2Native(commandBuffer, ppCopyImageInfo0);
			}
		}

		public void CmdCopyImage2(VkCommandBuffer commandBuffer, ref VkCopyImageInfo2 pCopyImageInfo)
		{
			fixed (VkCopyImageInfo2* ppCopyImageInfo0 = &pCopyImageInfo)
			{
				CmdCopyImage2Native(commandBuffer, ppCopyImageInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBlitImage2Native(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBlitImageInfo2*, void>)funcTable[177])(commandBuffer, pBlitImageInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[177])(commandBuffer, (nint)pBlitImageInfo);
			#endif
		}

		public void CmdBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)
		{
			CmdBlitImage2Native(commandBuffer, pBlitImageInfo);
		}

		public void CmdBlitImage2(VkCommandBuffer commandBuffer, Span<VkBlitImageInfo2> pBlitImageInfo)
		{
			fixed (VkBlitImageInfo2* ppBlitImageInfo0 = pBlitImageInfo)
			{
				CmdBlitImage2Native(commandBuffer, ppBlitImageInfo0);
			}
		}

		public void CmdBlitImage2(VkCommandBuffer commandBuffer, ref VkBlitImageInfo2 pBlitImageInfo)
		{
			fixed (VkBlitImageInfo2* ppBlitImageInfo0 = &pBlitImageInfo)
			{
				CmdBlitImage2Native(commandBuffer, ppBlitImageInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyBufferToImage2Native(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)funcTable[178])(commandBuffer, pCopyBufferToImageInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[178])(commandBuffer, (nint)pCopyBufferToImageInfo);
			#endif
		}

		public void CmdCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)
		{
			CmdCopyBufferToImage2Native(commandBuffer, pCopyBufferToImageInfo);
		}

		public void CmdCopyBufferToImage2(VkCommandBuffer commandBuffer, Span<VkCopyBufferToImageInfo2> pCopyBufferToImageInfo)
		{
			fixed (VkCopyBufferToImageInfo2* ppCopyBufferToImageInfo0 = pCopyBufferToImageInfo)
			{
				CmdCopyBufferToImage2Native(commandBuffer, ppCopyBufferToImageInfo0);
			}
		}

		public void CmdCopyBufferToImage2(VkCommandBuffer commandBuffer, ref VkCopyBufferToImageInfo2 pCopyBufferToImageInfo)
		{
			fixed (VkCopyBufferToImageInfo2* ppCopyBufferToImageInfo0 = &pCopyBufferToImageInfo)
			{
				CmdCopyBufferToImage2Native(commandBuffer, ppCopyBufferToImageInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdCopyImageToBuffer2Native(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)funcTable[179])(commandBuffer, pCopyImageToBufferInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[179])(commandBuffer, (nint)pCopyImageToBufferInfo);
			#endif
		}

		public void CmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)
		{
			CmdCopyImageToBuffer2Native(commandBuffer, pCopyImageToBufferInfo);
		}

		public void CmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, Span<VkCopyImageToBufferInfo2> pCopyImageToBufferInfo)
		{
			fixed (VkCopyImageToBufferInfo2* ppCopyImageToBufferInfo0 = pCopyImageToBufferInfo)
			{
				CmdCopyImageToBuffer2Native(commandBuffer, ppCopyImageToBufferInfo0);
			}
		}

		public void CmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, ref VkCopyImageToBufferInfo2 pCopyImageToBufferInfo)
		{
			fixed (VkCopyImageToBufferInfo2* ppCopyImageToBufferInfo0 = &pCopyImageToBufferInfo)
			{
				CmdCopyImageToBuffer2Native(commandBuffer, ppCopyImageToBufferInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdResolveImage2Native(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkResolveImageInfo2*, void>)funcTable[180])(commandBuffer, pResolveImageInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[180])(commandBuffer, (nint)pResolveImageInfo);
			#endif
		}

		public void CmdResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)
		{
			CmdResolveImage2Native(commandBuffer, pResolveImageInfo);
		}

		public void CmdResolveImage2(VkCommandBuffer commandBuffer, Span<VkResolveImageInfo2> pResolveImageInfo)
		{
			fixed (VkResolveImageInfo2* ppResolveImageInfo0 = pResolveImageInfo)
			{
				CmdResolveImage2Native(commandBuffer, ppResolveImageInfo0);
			}
		}

		public void CmdResolveImage2(VkCommandBuffer commandBuffer, ref VkResolveImageInfo2 pResolveImageInfo)
		{
			fixed (VkResolveImageInfo2* ppResolveImageInfo0 = &pResolveImageInfo)
			{
				CmdResolveImage2Native(commandBuffer, ppResolveImageInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetEvent2Native(VkCommandBuffer commandBuffer, VkEvent evnt, VkDependencyInfo* pDependencyInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)funcTable[181])(commandBuffer, evnt, pDependencyInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, nint, void>)funcTable[181])(commandBuffer, evnt, (nint)pDependencyInfo);
			#endif
		}

		public void CmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent evnt, VkDependencyInfo* pDependencyInfo)
		{
			CmdSetEvent2Native(commandBuffer, evnt, pDependencyInfo);
		}

		public void CmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent evnt, Span<VkDependencyInfo> pDependencyInfo)
		{
			fixed (VkDependencyInfo* ppDependencyInfo0 = pDependencyInfo)
			{
				CmdSetEvent2Native(commandBuffer, evnt, ppDependencyInfo0);
			}
		}

		public void CmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent evnt, ref VkDependencyInfo pDependencyInfo)
		{
			fixed (VkDependencyInfo* ppDependencyInfo0 = &pDependencyInfo)
			{
				CmdSetEvent2Native(commandBuffer, evnt, ppDependencyInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdResetEvent2Native(VkCommandBuffer commandBuffer, VkEvent evnt, ulong stageMask)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, ulong, void>)funcTable[182])(commandBuffer, evnt, stageMask);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkEvent, ulong, void>)funcTable[182])(commandBuffer, evnt, stageMask);
			#endif
		}

		public void CmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent evnt, ulong stageMask)
		{
			CmdResetEvent2Native(commandBuffer, evnt, stageMask);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdWaitEvents2Native(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void>)funcTable[183])(commandBuffer, eventCount, pEvents, pDependencyInfos);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, uint, nint, nint, void>)funcTable[183])(commandBuffer, eventCount, (nint)pEvents, (nint)pDependencyInfos);
			#endif
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)
		{
			CmdWaitEvents2Native(commandBuffer, eventCount, pEvents, pDependencyInfos);
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, VkDependencyInfo* pDependencyInfos)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				CmdWaitEvents2Native(commandBuffer, eventCount, ppEvents0, pDependencyInfos);
			}
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, VkDependencyInfo* pDependencyInfos)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				CmdWaitEvents2Native(commandBuffer, eventCount, ppEvents0, pDependencyInfos);
			}
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, Span<VkDependencyInfo> pDependencyInfos)
		{
			fixed (VkDependencyInfo* ppDependencyInfos0 = pDependencyInfos)
			{
				CmdWaitEvents2Native(commandBuffer, eventCount, pEvents, ppDependencyInfos0);
			}
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, ref VkDependencyInfo pDependencyInfos)
		{
			fixed (VkDependencyInfo* ppDependencyInfos0 = &pDependencyInfos)
			{
				CmdWaitEvents2Native(commandBuffer, eventCount, pEvents, ppDependencyInfos0);
			}
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, Span<VkEvent> pEvents, Span<VkDependencyInfo> pDependencyInfos)
		{
			fixed (VkEvent* ppEvents0 = pEvents)
			{
				fixed (VkDependencyInfo* ppDependencyInfos1 = pDependencyInfos)
				{
					CmdWaitEvents2Native(commandBuffer, eventCount, ppEvents0, ppDependencyInfos1);
				}
			}
		}

		public void CmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, ref VkEvent pEvents, ref VkDependencyInfo pDependencyInfos)
		{
			fixed (VkEvent* ppEvents0 = &pEvents)
			{
				fixed (VkDependencyInfo* ppDependencyInfos1 = &pDependencyInfos)
				{
					CmdWaitEvents2Native(commandBuffer, eventCount, ppEvents0, ppDependencyInfos1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPipelineBarrier2Native(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkDependencyInfo*, void>)funcTable[184])(commandBuffer, pDependencyInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[184])(commandBuffer, (nint)pDependencyInfo);
			#endif
		}

		public void CmdPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)
		{
			CmdPipelineBarrier2Native(commandBuffer, pDependencyInfo);
		}

		public void CmdPipelineBarrier2(VkCommandBuffer commandBuffer, Span<VkDependencyInfo> pDependencyInfo)
		{
			fixed (VkDependencyInfo* ppDependencyInfo0 = pDependencyInfo)
			{
				CmdPipelineBarrier2Native(commandBuffer, ppDependencyInfo0);
			}
		}
	}
}
