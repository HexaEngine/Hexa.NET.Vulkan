// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.Vulkan
{
	public unsafe partial class Device
	{
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceQueueNative(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* pQueue)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, uint, uint, VkQueue*, void>)funcTable[0])(device, queueFamilyIndex, queueIndex, pQueue);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, uint, uint, nint, void>)funcTable[0])(device, queueFamilyIndex, queueIndex, (nint)pQueue);
			#endif
		}

		public void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* pQueue)
		{
			GetDeviceQueueNative(device, queueFamilyIndex, queueIndex, pQueue);
		}

		public void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, Span<VkQueue> pQueue)
		{
			fixed (VkQueue* ppQueue0 = pQueue)
			{
				GetDeviceQueueNative(device, queueFamilyIndex, queueIndex, ppQueue0);
			}
		}

		public void GetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, ref VkQueue pQueue)
		{
			fixed (VkQueue* ppQueue0 = &pQueue)
			{
				GetDeviceQueueNative(device, queueFamilyIndex, queueIndex, ppQueue0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult QueueSubmitNative(VkQueue queue, uint submitCount, VkSubmitInfo* pSubmits, VkFence fence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo*, VkFence, VkResult>)funcTable[1])(queue, submitCount, pSubmits, fence);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkQueue, uint, nint, VkFence, VkResult>)funcTable[1])(queue, submitCount, (nint)pSubmits, fence);
			#endif
		}

		public VkResult QueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* pSubmits, VkFence fence)
		{
			VkResult ret = QueueSubmitNative(queue, submitCount, pSubmits, fence);
			return ret;
		}

		public VkResult QueueSubmit(VkQueue queue, uint submitCount, Span<VkSubmitInfo> pSubmits, VkFence fence)
		{
			fixed (VkSubmitInfo* ppSubmits0 = pSubmits)
			{
				VkResult ret = QueueSubmitNative(queue, submitCount, ppSubmits0, fence);
				return ret;
			}
		}

		public VkResult QueueSubmit(VkQueue queue, uint submitCount, ref VkSubmitInfo pSubmits, VkFence fence)
		{
			fixed (VkSubmitInfo* ppSubmits0 = &pSubmits)
			{
				VkResult ret = QueueSubmitNative(queue, submitCount, ppSubmits0, fence);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult QueueWaitIdleNative(VkQueue queue)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkQueue, VkResult>)funcTable[2])(queue);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkQueue, VkResult>)funcTable[2])(queue);
			#endif
		}

		public VkResult QueueWaitIdle(VkQueue queue)
		{
			VkResult ret = QueueWaitIdleNative(queue);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult DeviceWaitIdleNative(VkDevice device)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkResult>)funcTable[3])(device);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkResult>)funcTable[3])(device);
			#endif
		}

		public VkResult DeviceWaitIdle(VkDevice device)
		{
			VkResult ret = DeviceWaitIdleNative(device);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult AllocateMemoryNative(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)funcTable[4])(device, pAllocateInfo, pAllocator, pMemory);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[4])(device, (nint)pAllocateInfo, (nint)pAllocator, (nint)pMemory);
			#endif
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)
		{
			VkResult ret = AllocateMemoryNative(device, pAllocateInfo, pAllocator, pMemory);
			return ret;
		}

		public VkResult AllocateMemory(VkDevice device, Span<VkMemoryAllocateInfo> pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, pAllocator, pMemory);
				return ret;
			}
		}

		public VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, pAllocator, pMemory);
				return ret;
			}
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, Span<VkAllocationCallbacks> pAllocator, VkDeviceMemory* pMemory)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = AllocateMemoryNative(device, pAllocateInfo, ppAllocator0, pMemory);
				return ret;
			}
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, ref VkAllocationCallbacks pAllocator, VkDeviceMemory* pMemory)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = AllocateMemoryNative(device, pAllocateInfo, ppAllocator0, pMemory);
				return ret;
			}
		}

		public VkResult AllocateMemory(VkDevice device, Span<VkMemoryAllocateInfo> pAllocateInfo, Span<VkAllocationCallbacks> pAllocator, VkDeviceMemory* pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, ppAllocator1, pMemory);
					return ret;
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo pAllocateInfo, ref VkAllocationCallbacks pAllocator, VkDeviceMemory* pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, ppAllocator1, pMemory);
					return ret;
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, Span<VkDeviceMemory> pMemory)
		{
			fixed (VkDeviceMemory* ppMemory0 = pMemory)
			{
				VkResult ret = AllocateMemoryNative(device, pAllocateInfo, pAllocator, ppMemory0);
				return ret;
			}
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, ref VkDeviceMemory pMemory)
		{
			fixed (VkDeviceMemory* ppMemory0 = &pMemory)
			{
				VkResult ret = AllocateMemoryNative(device, pAllocateInfo, pAllocator, ppMemory0);
				return ret;
			}
		}

		public VkResult AllocateMemory(VkDevice device, Span<VkMemoryAllocateInfo> pAllocateInfo, VkAllocationCallbacks* pAllocator, Span<VkDeviceMemory> pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				fixed (VkDeviceMemory* ppMemory1 = pMemory)
				{
					VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, pAllocator, ppMemory1);
					return ret;
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo pAllocateInfo, VkAllocationCallbacks* pAllocator, ref VkDeviceMemory pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				fixed (VkDeviceMemory* ppMemory1 = &pMemory)
				{
					VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, pAllocator, ppMemory1);
					return ret;
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDeviceMemory> pMemory)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkDeviceMemory* ppMemory1 = pMemory)
				{
					VkResult ret = AllocateMemoryNative(device, pAllocateInfo, ppAllocator0, ppMemory1);
					return ret;
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, ref VkAllocationCallbacks pAllocator, ref VkDeviceMemory pMemory)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkDeviceMemory* ppMemory1 = &pMemory)
				{
					VkResult ret = AllocateMemoryNative(device, pAllocateInfo, ppAllocator0, ppMemory1);
					return ret;
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, Span<VkMemoryAllocateInfo> pAllocateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDeviceMemory> pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkDeviceMemory* ppMemory2 = pMemory)
					{
						VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, ppAllocator1, ppMemory2);
						return ret;
					}
				}
			}
		}

		public VkResult AllocateMemory(VkDevice device, ref VkMemoryAllocateInfo pAllocateInfo, ref VkAllocationCallbacks pAllocator, ref VkDeviceMemory pMemory)
		{
			fixed (VkMemoryAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkDeviceMemory* ppMemory2 = &pMemory)
					{
						VkResult ret = AllocateMemoryNative(device, ppAllocateInfo0, ppAllocator1, ppMemory2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void FreeMemoryNative(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)funcTable[5])(device, memory, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, nint, void>)funcTable[5])(device, memory, (nint)pAllocator);
			#endif
		}

		public void FreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)
		{
			FreeMemoryNative(device, memory, pAllocator);
		}

		public void FreeMemory(VkDevice device, VkDeviceMemory memory, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				FreeMemoryNative(device, memory, ppAllocator0);
			}
		}

		public void FreeMemory(VkDevice device, VkDeviceMemory memory, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				FreeMemoryNative(device, memory, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult MapMemoryNative(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void**, VkResult>)funcTable[6])(device, memory, offset, size, flags, ppData);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, nint, VkResult>)funcTable[6])(device, memory, offset, size, flags, (nint)ppData);
			#endif
		}

		public VkResult MapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData)
		{
			VkResult ret = MapMemoryNative(device, memory, offset, size, flags, ppData);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void UnmapMemoryNative(VkDevice device, VkDeviceMemory memory)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, void>)funcTable[7])(device, memory);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, void>)funcTable[7])(device, memory);
			#endif
		}

		public void UnmapMemory(VkDevice device, VkDeviceMemory memory)
		{
			UnmapMemoryNative(device, memory);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult FlushMappedMemoryRangesNative(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange*, VkResult>)funcTable[8])(device, memoryRangeCount, pMemoryRanges);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkResult>)funcTable[8])(device, memoryRangeCount, (nint)pMemoryRanges);
			#endif
		}

		public VkResult FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
		{
			VkResult ret = FlushMappedMemoryRangesNative(device, memoryRangeCount, pMemoryRanges);
			return ret;
		}

		public VkResult FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, Span<VkMappedMemoryRange> pMemoryRanges)
		{
			fixed (VkMappedMemoryRange* ppMemoryRanges0 = pMemoryRanges)
			{
				VkResult ret = FlushMappedMemoryRangesNative(device, memoryRangeCount, ppMemoryRanges0);
				return ret;
			}
		}

		public VkResult FlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges)
		{
			fixed (VkMappedMemoryRange* ppMemoryRanges0 = &pMemoryRanges)
			{
				VkResult ret = FlushMappedMemoryRangesNative(device, memoryRangeCount, ppMemoryRanges0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult InvalidateMappedMemoryRangesNative(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkMappedMemoryRange*, VkResult>)funcTable[9])(device, memoryRangeCount, pMemoryRanges);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkResult>)funcTable[9])(device, memoryRangeCount, (nint)pMemoryRanges);
			#endif
		}

		public VkResult InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
		{
			VkResult ret = InvalidateMappedMemoryRangesNative(device, memoryRangeCount, pMemoryRanges);
			return ret;
		}

		public VkResult InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, Span<VkMappedMemoryRange> pMemoryRanges)
		{
			fixed (VkMappedMemoryRange* ppMemoryRanges0 = pMemoryRanges)
			{
				VkResult ret = InvalidateMappedMemoryRangesNative(device, memoryRangeCount, ppMemoryRanges0);
				return ret;
			}
		}

		public VkResult InvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, ref VkMappedMemoryRange pMemoryRanges)
		{
			fixed (VkMappedMemoryRange* ppMemoryRanges0 = &pMemoryRanges)
			{
				VkResult ret = InvalidateMappedMemoryRangesNative(device, memoryRangeCount, ppMemoryRanges0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceMemoryCommitmentNative(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, VkDeviceSize*, void>)funcTable[10])(device, memory, pCommittedMemoryInBytes);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceMemory, nint, void>)funcTable[10])(device, memory, (nint)pCommittedMemoryInBytes);
			#endif
		}

		public void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)
		{
			GetDeviceMemoryCommitmentNative(device, memory, pCommittedMemoryInBytes);
		}

		public void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, Span<VkDeviceSize> pCommittedMemoryInBytes)
		{
			fixed (VkDeviceSize* ppCommittedMemoryInBytes0 = pCommittedMemoryInBytes)
			{
				GetDeviceMemoryCommitmentNative(device, memory, ppCommittedMemoryInBytes0);
			}
		}

		public void GetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, ref VkDeviceSize pCommittedMemoryInBytes)
		{
			fixed (VkDeviceSize* ppCommittedMemoryInBytes0 = &pCommittedMemoryInBytes)
			{
				GetDeviceMemoryCommitmentNative(device, memory, ppCommittedMemoryInBytes0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetBufferMemoryRequirementsNative(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkMemoryRequirements*, void>)funcTable[11])(device, buffer, pMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, nint, void>)funcTable[11])(device, buffer, (nint)pMemoryRequirements);
			#endif
		}

		public void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)
		{
			GetBufferMemoryRequirementsNative(device, buffer, pMemoryRequirements);
		}

		public void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, Span<VkMemoryRequirements> pMemoryRequirements)
		{
			fixed (VkMemoryRequirements* ppMemoryRequirements0 = pMemoryRequirements)
			{
				GetBufferMemoryRequirementsNative(device, buffer, ppMemoryRequirements0);
			}
		}

		public void GetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, ref VkMemoryRequirements pMemoryRequirements)
		{
			fixed (VkMemoryRequirements* ppMemoryRequirements0 = &pMemoryRequirements)
			{
				GetBufferMemoryRequirementsNative(device, buffer, ppMemoryRequirements0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult BindBufferMemoryNative(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult>)funcTable[12])(device, buffer, memory, memoryOffset);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult>)funcTable[12])(device, buffer, memory, memoryOffset);
			#endif
		}

		public VkResult BindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
		{
			VkResult ret = BindBufferMemoryNative(device, buffer, memory, memoryOffset);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetImageMemoryRequirementsNative(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkMemoryRequirements*, void>)funcTable[13])(device, image, pMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, nint, void>)funcTable[13])(device, image, (nint)pMemoryRequirements);
			#endif
		}

		public void GetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)
		{
			GetImageMemoryRequirementsNative(device, image, pMemoryRequirements);
		}

		public void GetImageMemoryRequirements(VkDevice device, VkImage image, Span<VkMemoryRequirements> pMemoryRequirements)
		{
			fixed (VkMemoryRequirements* ppMemoryRequirements0 = pMemoryRequirements)
			{
				GetImageMemoryRequirementsNative(device, image, ppMemoryRequirements0);
			}
		}

		public void GetImageMemoryRequirements(VkDevice device, VkImage image, ref VkMemoryRequirements pMemoryRequirements)
		{
			fixed (VkMemoryRequirements* ppMemoryRequirements0 = &pMemoryRequirements)
			{
				GetImageMemoryRequirementsNative(device, image, ppMemoryRequirements0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult BindImageMemoryNative(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult>)funcTable[14])(device, image, memory, memoryOffset);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult>)funcTable[14])(device, image, memory, memoryOffset);
			#endif
		}

		public VkResult BindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
		{
			VkResult ret = BindImageMemoryNative(device, image, memory, memoryOffset);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetImageSparseMemoryRequirementsNative(VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements*, void>)funcTable[15])(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, nint, nint, void>)funcTable[15])(device, image, (nint)pSparseMemoryRequirementCount, (nint)pSparseMemoryRequirements);
			#endif
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
		{
			GetImageSparseMemoryRequirementsNative(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, Span<uint> pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = pSparseMemoryRequirementCount)
			{
				GetImageSparseMemoryRequirementsNative(device, image, ppSparseMemoryRequirementCount0, pSparseMemoryRequirements);
			}
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = &pSparseMemoryRequirementCount)
			{
				GetImageSparseMemoryRequirementsNative(device, image, ppSparseMemoryRequirementCount0, pSparseMemoryRequirements);
			}
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements> pSparseMemoryRequirements)
		{
			fixed (VkSparseImageMemoryRequirements* ppSparseMemoryRequirements0 = pSparseMemoryRequirements)
			{
				GetImageSparseMemoryRequirementsNative(device, image, pSparseMemoryRequirementCount, ppSparseMemoryRequirements0);
			}
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements pSparseMemoryRequirements)
		{
			fixed (VkSparseImageMemoryRequirements* ppSparseMemoryRequirements0 = &pSparseMemoryRequirements)
			{
				GetImageSparseMemoryRequirementsNative(device, image, pSparseMemoryRequirementCount, ppSparseMemoryRequirements0);
			}
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, Span<uint> pSparseMemoryRequirementCount, Span<VkSparseImageMemoryRequirements> pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = pSparseMemoryRequirementCount)
			{
				fixed (VkSparseImageMemoryRequirements* ppSparseMemoryRequirements1 = pSparseMemoryRequirements)
				{
					GetImageSparseMemoryRequirementsNative(device, image, ppSparseMemoryRequirementCount0, ppSparseMemoryRequirements1);
				}
			}
		}

		public void GetImageSparseMemoryRequirements(VkDevice device, VkImage image, ref uint pSparseMemoryRequirementCount, ref VkSparseImageMemoryRequirements pSparseMemoryRequirements)
		{
			fixed (uint* ppSparseMemoryRequirementCount0 = &pSparseMemoryRequirementCount)
			{
				fixed (VkSparseImageMemoryRequirements* ppSparseMemoryRequirements1 = &pSparseMemoryRequirements)
				{
					GetImageSparseMemoryRequirementsNative(device, image, ppSparseMemoryRequirementCount0, ppSparseMemoryRequirements1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult QueueBindSparseNative(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult>)funcTable[16])(queue, bindInfoCount, pBindInfo, fence);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkQueue, uint, nint, VkFence, VkResult>)funcTable[16])(queue, bindInfoCount, (nint)pBindInfo, fence);
			#endif
		}

		public VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)
		{
			VkResult ret = QueueBindSparseNative(queue, bindInfoCount, pBindInfo, fence);
			return ret;
		}

		public VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, Span<VkBindSparseInfo> pBindInfo, VkFence fence)
		{
			fixed (VkBindSparseInfo* ppBindInfo0 = pBindInfo)
			{
				VkResult ret = QueueBindSparseNative(queue, bindInfoCount, ppBindInfo0, fence);
				return ret;
			}
		}

		public VkResult QueueBindSparse(VkQueue queue, uint bindInfoCount, ref VkBindSparseInfo pBindInfo, VkFence fence)
		{
			fixed (VkBindSparseInfo* ppBindInfo0 = &pBindInfo)
			{
				VkResult ret = QueueBindSparseNative(queue, bindInfoCount, ppBindInfo0, fence);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateFenceNative(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)funcTable[17])(device, pCreateInfo, pAllocator, pFence);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[17])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pFence);
			#endif
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
		{
			VkResult ret = CreateFenceNative(device, pCreateInfo, pAllocator, pFence);
			return ret;
		}

		public VkResult CreateFence(VkDevice device, Span<VkFenceCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateFenceNative(device, ppCreateInfo0, pAllocator, pFence);
				return ret;
			}
		}

		public VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateFenceNative(device, ppCreateInfo0, pAllocator, pFence);
				return ret;
			}
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkFence* pFence)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateFenceNative(device, pCreateInfo, ppAllocator0, pFence);
				return ret;
			}
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkFence* pFence)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateFenceNative(device, pCreateInfo, ppAllocator0, pFence);
				return ret;
			}
		}

		public VkResult CreateFence(VkDevice device, Span<VkFenceCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkFence* pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateFenceNative(device, ppCreateInfo0, ppAllocator1, pFence);
					return ret;
				}
			}
		}

		public VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkFence* pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateFenceNative(device, ppCreateInfo0, ppAllocator1, pFence);
					return ret;
				}
			}
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkFence> pFence)
		{
			fixed (VkFence* ppFence0 = pFence)
			{
				VkResult ret = CreateFenceNative(device, pCreateInfo, pAllocator, ppFence0);
				return ret;
			}
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkFence pFence)
		{
			fixed (VkFence* ppFence0 = &pFence)
			{
				VkResult ret = CreateFenceNative(device, pCreateInfo, pAllocator, ppFence0);
				return ret;
			}
		}

		public VkResult CreateFence(VkDevice device, Span<VkFenceCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkFence> pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkFence* ppFence1 = pFence)
				{
					VkResult ret = CreateFenceNative(device, ppCreateInfo0, pAllocator, ppFence1);
					return ret;
				}
			}
		}

		public VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkFence pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkFence* ppFence1 = &pFence)
				{
					VkResult ret = CreateFenceNative(device, ppCreateInfo0, pAllocator, ppFence1);
					return ret;
				}
			}
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkFence> pFence)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkFence* ppFence1 = pFence)
				{
					VkResult ret = CreateFenceNative(device, pCreateInfo, ppAllocator0, ppFence1);
					return ret;
				}
			}
		}

		public VkResult CreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkFence pFence)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkFence* ppFence1 = &pFence)
				{
					VkResult ret = CreateFenceNative(device, pCreateInfo, ppAllocator0, ppFence1);
					return ret;
				}
			}
		}

		public VkResult CreateFence(VkDevice device, Span<VkFenceCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkFence> pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkFence* ppFence2 = pFence)
					{
						VkResult ret = CreateFenceNative(device, ppCreateInfo0, ppAllocator1, ppFence2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateFence(VkDevice device, ref VkFenceCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkFence pFence)
		{
			fixed (VkFenceCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkFence* ppFence2 = &pFence)
					{
						VkResult ret = CreateFenceNative(device, ppCreateInfo0, ppAllocator1, ppFence2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyFenceNative(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkAllocationCallbacks*, void>)funcTable[18])(device, fence, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkFence, nint, void>)funcTable[18])(device, fence, (nint)pAllocator);
			#endif
		}

		public void DestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)
		{
			DestroyFenceNative(device, fence, pAllocator);
		}

		public void DestroyFence(VkDevice device, VkFence fence, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyFenceNative(device, fence, ppAllocator0);
			}
		}

		public void DestroyFence(VkDevice device, VkFence fence, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyFenceNative(device, fence, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult ResetFencesNative(VkDevice device, uint fenceCount, VkFence* pFences)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence*, VkResult>)funcTable[19])(device, fenceCount, pFences);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkResult>)funcTable[19])(device, fenceCount, (nint)pFences);
			#endif
		}

		public VkResult ResetFences(VkDevice device, uint fenceCount, VkFence* pFences)
		{
			VkResult ret = ResetFencesNative(device, fenceCount, pFences);
			return ret;
		}

		public VkResult ResetFences(VkDevice device, uint fenceCount, Span<VkFence> pFences)
		{
			fixed (VkFence* ppFences0 = pFences)
			{
				VkResult ret = ResetFencesNative(device, fenceCount, ppFences0);
				return ret;
			}
		}

		public VkResult ResetFences(VkDevice device, uint fenceCount, ref VkFence pFences)
		{
			fixed (VkFence* ppFences0 = &pFences)
			{
				VkResult ret = ResetFencesNative(device, fenceCount, ppFences0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult GetFenceStatusNative(VkDevice device, VkFence fence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkResult>)funcTable[20])(device, fence);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkFence, VkResult>)funcTable[20])(device, fence);
			#endif
		}

		public VkResult GetFenceStatus(VkDevice device, VkFence fence)
		{
			VkResult ret = GetFenceStatusNative(device, fence);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult WaitForFencesNative(VkDevice device, uint fenceCount, VkFence* pFences, VkBool32 waitAll, ulong timeout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkFence*, VkBool32, ulong, VkResult>)funcTable[21])(device, fenceCount, pFences, waitAll, timeout);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkBool32, ulong, VkResult>)funcTable[21])(device, fenceCount, (nint)pFences, waitAll, timeout);
			#endif
		}

		public VkResult WaitForFences(VkDevice device, uint fenceCount, VkFence* pFences, VkBool32 waitAll, ulong timeout)
		{
			VkResult ret = WaitForFencesNative(device, fenceCount, pFences, waitAll, timeout);
			return ret;
		}

		public VkResult WaitForFences(VkDevice device, uint fenceCount, Span<VkFence> pFences, VkBool32 waitAll, ulong timeout)
		{
			fixed (VkFence* ppFences0 = pFences)
			{
				VkResult ret = WaitForFencesNative(device, fenceCount, ppFences0, waitAll, timeout);
				return ret;
			}
		}

		public VkResult WaitForFences(VkDevice device, uint fenceCount, ref VkFence pFences, VkBool32 waitAll, ulong timeout)
		{
			fixed (VkFence* ppFences0 = &pFences)
			{
				VkResult ret = WaitForFencesNative(device, fenceCount, ppFences0, waitAll, timeout);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateSemaphoreNative(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)funcTable[22])(device, pCreateInfo, pAllocator, pSemaphore);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[22])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pSemaphore);
			#endif
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)
		{
			VkResult ret = CreateSemaphoreNative(device, pCreateInfo, pAllocator, pSemaphore);
			return ret;
		}

		public VkResult CreateSemaphore(VkDevice device, Span<VkSemaphoreCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, pAllocator, pSemaphore);
				return ret;
			}
		}

		public VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, pAllocator, pSemaphore);
				return ret;
			}
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkSemaphore* pSemaphore)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateSemaphoreNative(device, pCreateInfo, ppAllocator0, pSemaphore);
				return ret;
			}
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkSemaphore* pSemaphore)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateSemaphoreNative(device, pCreateInfo, ppAllocator0, pSemaphore);
				return ret;
			}
		}

		public VkResult CreateSemaphore(VkDevice device, Span<VkSemaphoreCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkSemaphore* pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, ppAllocator1, pSemaphore);
					return ret;
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkSemaphore* pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, ppAllocator1, pSemaphore);
					return ret;
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkSemaphore> pSemaphore)
		{
			fixed (VkSemaphore* ppSemaphore0 = pSemaphore)
			{
				VkResult ret = CreateSemaphoreNative(device, pCreateInfo, pAllocator, ppSemaphore0);
				return ret;
			}
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSemaphore pSemaphore)
		{
			fixed (VkSemaphore* ppSemaphore0 = &pSemaphore)
			{
				VkResult ret = CreateSemaphoreNative(device, pCreateInfo, pAllocator, ppSemaphore0);
				return ret;
			}
		}

		public VkResult CreateSemaphore(VkDevice device, Span<VkSemaphoreCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkSemaphore> pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkSemaphore* ppSemaphore1 = pSemaphore)
				{
					VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, pAllocator, ppSemaphore1);
					return ret;
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSemaphore pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkSemaphore* ppSemaphore1 = &pSemaphore)
				{
					VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, pAllocator, ppSemaphore1);
					return ret;
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkSemaphore> pSemaphore)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkSemaphore* ppSemaphore1 = pSemaphore)
				{
					VkResult ret = CreateSemaphoreNative(device, pCreateInfo, ppAllocator0, ppSemaphore1);
					return ret;
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkSemaphore pSemaphore)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkSemaphore* ppSemaphore1 = &pSemaphore)
				{
					VkResult ret = CreateSemaphoreNative(device, pCreateInfo, ppAllocator0, ppSemaphore1);
					return ret;
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, Span<VkSemaphoreCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkSemaphore> pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkSemaphore* ppSemaphore2 = pSemaphore)
					{
						VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, ppAllocator1, ppSemaphore2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateSemaphore(VkDevice device, ref VkSemaphoreCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkSemaphore pSemaphore)
		{
			fixed (VkSemaphoreCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkSemaphore* ppSemaphore2 = &pSemaphore)
					{
						VkResult ret = CreateSemaphoreNative(device, ppCreateInfo0, ppAllocator1, ppSemaphore2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroySemaphoreNative(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)funcTable[23])(device, semaphore, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkSemaphore, nint, void>)funcTable[23])(device, semaphore, (nint)pAllocator);
			#endif
		}

		public void DestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)
		{
			DestroySemaphoreNative(device, semaphore, pAllocator);
		}

		public void DestroySemaphore(VkDevice device, VkSemaphore semaphore, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroySemaphoreNative(device, semaphore, ppAllocator0);
			}
		}

		public void DestroySemaphore(VkDevice device, VkSemaphore semaphore, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroySemaphoreNative(device, semaphore, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateEventNative(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)funcTable[24])(device, pCreateInfo, pAllocator, pEvent);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[24])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pEvent);
			#endif
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)
		{
			VkResult ret = CreateEventNative(device, pCreateInfo, pAllocator, pEvent);
			return ret;
		}

		public VkResult CreateEvent(VkDevice device, Span<VkEventCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateEventNative(device, ppCreateInfo0, pAllocator, pEvent);
				return ret;
			}
		}

		public VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateEventNative(device, ppCreateInfo0, pAllocator, pEvent);
				return ret;
			}
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkEvent* pEvent)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateEventNative(device, pCreateInfo, ppAllocator0, pEvent);
				return ret;
			}
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkEvent* pEvent)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateEventNative(device, pCreateInfo, ppAllocator0, pEvent);
				return ret;
			}
		}

		public VkResult CreateEvent(VkDevice device, Span<VkEventCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkEvent* pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateEventNative(device, ppCreateInfo0, ppAllocator1, pEvent);
					return ret;
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkEvent* pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateEventNative(device, ppCreateInfo0, ppAllocator1, pEvent);
					return ret;
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkEvent> pEvent)
		{
			fixed (VkEvent* ppEvent0 = pEvent)
			{
				VkResult ret = CreateEventNative(device, pCreateInfo, pAllocator, ppEvent0);
				return ret;
			}
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkEvent pEvent)
		{
			fixed (VkEvent* ppEvent0 = &pEvent)
			{
				VkResult ret = CreateEventNative(device, pCreateInfo, pAllocator, ppEvent0);
				return ret;
			}
		}

		public VkResult CreateEvent(VkDevice device, Span<VkEventCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkEvent> pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkEvent* ppEvent1 = pEvent)
				{
					VkResult ret = CreateEventNative(device, ppCreateInfo0, pAllocator, ppEvent1);
					return ret;
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkEvent pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkEvent* ppEvent1 = &pEvent)
				{
					VkResult ret = CreateEventNative(device, ppCreateInfo0, pAllocator, ppEvent1);
					return ret;
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkEvent> pEvent)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkEvent* ppEvent1 = pEvent)
				{
					VkResult ret = CreateEventNative(device, pCreateInfo, ppAllocator0, ppEvent1);
					return ret;
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkEvent pEvent)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkEvent* ppEvent1 = &pEvent)
				{
					VkResult ret = CreateEventNative(device, pCreateInfo, ppAllocator0, ppEvent1);
					return ret;
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, Span<VkEventCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkEvent> pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkEvent* ppEvent2 = pEvent)
					{
						VkResult ret = CreateEventNative(device, ppCreateInfo0, ppAllocator1, ppEvent2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateEvent(VkDevice device, ref VkEventCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkEvent pEvent)
		{
			fixed (VkEventCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkEvent* ppEvent2 = &pEvent)
					{
						VkResult ret = CreateEventNative(device, ppCreateInfo0, ppAllocator1, ppEvent2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyEventNative(VkDevice device, VkEvent evnt, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkAllocationCallbacks*, void>)funcTable[25])(device, evnt, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, nint, void>)funcTable[25])(device, evnt, (nint)pAllocator);
			#endif
		}

		public void DestroyEvent(VkDevice device, VkEvent evnt, VkAllocationCallbacks* pAllocator)
		{
			DestroyEventNative(device, evnt, pAllocator);
		}

		public void DestroyEvent(VkDevice device, VkEvent evnt, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyEventNative(device, evnt, ppAllocator0);
			}
		}

		public void DestroyEvent(VkDevice device, VkEvent evnt, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyEventNative(device, evnt, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult GetEventStatusNative(VkDevice device, VkEvent evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)funcTable[26])(device, evnt);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)funcTable[26])(device, evnt);
			#endif
		}

		public VkResult GetEventStatus(VkDevice device, VkEvent evnt)
		{
			VkResult ret = GetEventStatusNative(device, evnt);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult SetEventNative(VkDevice device, VkEvent evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)funcTable[27])(device, evnt);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)funcTable[27])(device, evnt);
			#endif
		}

		public VkResult SetEvent(VkDevice device, VkEvent evnt)
		{
			VkResult ret = SetEventNative(device, evnt);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult ResetEventNative(VkDevice device, VkEvent evnt)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)funcTable[28])(device, evnt);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkEvent, VkResult>)funcTable[28])(device, evnt);
			#endif
		}

		public VkResult ResetEvent(VkDevice device, VkEvent evnt)
		{
			VkResult ret = ResetEventNative(device, evnt);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateQueryPoolNative(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)funcTable[29])(device, pCreateInfo, pAllocator, pQueryPool);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[29])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pQueryPool);
			#endif
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)
		{
			VkResult ret = CreateQueryPoolNative(device, pCreateInfo, pAllocator, pQueryPool);
			return ret;
		}

		public VkResult CreateQueryPool(VkDevice device, Span<VkQueryPoolCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, pAllocator, pQueryPool);
				return ret;
			}
		}

		public VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, pAllocator, pQueryPool);
				return ret;
			}
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkQueryPool* pQueryPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateQueryPoolNative(device, pCreateInfo, ppAllocator0, pQueryPool);
				return ret;
			}
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkQueryPool* pQueryPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateQueryPoolNative(device, pCreateInfo, ppAllocator0, pQueryPool);
				return ret;
			}
		}

		public VkResult CreateQueryPool(VkDevice device, Span<VkQueryPoolCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkQueryPool* pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, ppAllocator1, pQueryPool);
					return ret;
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkQueryPool* pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, ppAllocator1, pQueryPool);
					return ret;
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkQueryPool> pQueryPool)
		{
			fixed (VkQueryPool* ppQueryPool0 = pQueryPool)
			{
				VkResult ret = CreateQueryPoolNative(device, pCreateInfo, pAllocator, ppQueryPool0);
				return ret;
			}
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkQueryPool pQueryPool)
		{
			fixed (VkQueryPool* ppQueryPool0 = &pQueryPool)
			{
				VkResult ret = CreateQueryPoolNative(device, pCreateInfo, pAllocator, ppQueryPool0);
				return ret;
			}
		}

		public VkResult CreateQueryPool(VkDevice device, Span<VkQueryPoolCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkQueryPool> pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkQueryPool* ppQueryPool1 = pQueryPool)
				{
					VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, pAllocator, ppQueryPool1);
					return ret;
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkQueryPool pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkQueryPool* ppQueryPool1 = &pQueryPool)
				{
					VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, pAllocator, ppQueryPool1);
					return ret;
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkQueryPool> pQueryPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkQueryPool* ppQueryPool1 = pQueryPool)
				{
					VkResult ret = CreateQueryPoolNative(device, pCreateInfo, ppAllocator0, ppQueryPool1);
					return ret;
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkQueryPool pQueryPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkQueryPool* ppQueryPool1 = &pQueryPool)
				{
					VkResult ret = CreateQueryPoolNative(device, pCreateInfo, ppAllocator0, ppQueryPool1);
					return ret;
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, Span<VkQueryPoolCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkQueryPool> pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkQueryPool* ppQueryPool2 = pQueryPool)
					{
						VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, ppAllocator1, ppQueryPool2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateQueryPool(VkDevice device, ref VkQueryPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkQueryPool pQueryPool)
		{
			fixed (VkQueryPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkQueryPool* ppQueryPool2 = &pQueryPool)
					{
						VkResult ret = CreateQueryPoolNative(device, ppCreateInfo0, ppAllocator1, ppQueryPool2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyQueryPoolNative(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)funcTable[30])(device, queryPool, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, nint, void>)funcTable[30])(device, queryPool, (nint)pAllocator);
			#endif
		}

		public void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)
		{
			DestroyQueryPoolNative(device, queryPool, pAllocator);
		}

		public void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyQueryPoolNative(device, queryPool, ppAllocator0);
			}
		}

		public void DestroyQueryPool(VkDevice device, VkQueryPool queryPool, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyQueryPoolNative(device, queryPool, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult GetQueryPoolResultsNative(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, nuint, void*, VkDeviceSize, VkQueryResultFlags, VkResult>)funcTable[31])(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, nuint, nint, VkDeviceSize, VkQueryResultFlags, VkResult>)funcTable[31])(device, queryPool, firstQuery, queryCount, dataSize, (nint)pData, stride, flags);
			#endif
		}

		public VkResult GetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)
		{
			VkResult ret = GetQueryPoolResultsNative(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
			return ret;
		}

		public VkResult GetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, nint pData, VkDeviceSize stride, VkQueryResultFlags flags)
		{
			VkResult ret = GetQueryPoolResultsNative(device, queryPool, firstQuery, queryCount, dataSize, (void*)pData, stride, flags);
			return ret;
		}

		public VkResult GetQueryPoolResults<TPData>(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, nuint dataSize, Span<TPData> pData, VkDeviceSize stride, VkQueryResultFlags flags) where TPData : unmanaged
		{
			fixed (TPData* ppData0 = pData)
			{
				VkResult ret = GetQueryPoolResultsNative(device, queryPool, firstQuery, queryCount, dataSize, ppData0, stride, flags);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void ResetQueryPoolNative(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, void>)funcTable[32])(device, queryPool, firstQuery, queryCount);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkQueryPool, uint, uint, void>)funcTable[32])(device, queryPool, firstQuery, queryCount);
			#endif
		}

		public void ResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
		{
			ResetQueryPoolNative(device, queryPool, firstQuery, queryCount);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateBufferNative(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)funcTable[33])(device, pCreateInfo, pAllocator, pBuffer);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[33])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pBuffer);
			#endif
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)
		{
			VkResult ret = CreateBufferNative(device, pCreateInfo, pAllocator, pBuffer);
			return ret;
		}

		public VkResult CreateBuffer(VkDevice device, Span<VkBufferCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateBufferNative(device, ppCreateInfo0, pAllocator, pBuffer);
				return ret;
			}
		}

		public VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateBufferNative(device, ppCreateInfo0, pAllocator, pBuffer);
				return ret;
			}
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkBuffer* pBuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateBufferNative(device, pCreateInfo, ppAllocator0, pBuffer);
				return ret;
			}
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkBuffer* pBuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateBufferNative(device, pCreateInfo, ppAllocator0, pBuffer);
				return ret;
			}
		}

		public VkResult CreateBuffer(VkDevice device, Span<VkBufferCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkBuffer* pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateBufferNative(device, ppCreateInfo0, ppAllocator1, pBuffer);
					return ret;
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkBuffer* pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateBufferNative(device, ppCreateInfo0, ppAllocator1, pBuffer);
					return ret;
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkBuffer> pBuffer)
		{
			fixed (VkBuffer* ppBuffer0 = pBuffer)
			{
				VkResult ret = CreateBufferNative(device, pCreateInfo, pAllocator, ppBuffer0);
				return ret;
			}
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkBuffer pBuffer)
		{
			fixed (VkBuffer* ppBuffer0 = &pBuffer)
			{
				VkResult ret = CreateBufferNative(device, pCreateInfo, pAllocator, ppBuffer0);
				return ret;
			}
		}

		public VkResult CreateBuffer(VkDevice device, Span<VkBufferCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkBuffer> pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkBuffer* ppBuffer1 = pBuffer)
				{
					VkResult ret = CreateBufferNative(device, ppCreateInfo0, pAllocator, ppBuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkBuffer pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkBuffer* ppBuffer1 = &pBuffer)
				{
					VkResult ret = CreateBufferNative(device, ppCreateInfo0, pAllocator, ppBuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkBuffer> pBuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkBuffer* ppBuffer1 = pBuffer)
				{
					VkResult ret = CreateBufferNative(device, pCreateInfo, ppAllocator0, ppBuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkBuffer pBuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkBuffer* ppBuffer1 = &pBuffer)
				{
					VkResult ret = CreateBufferNative(device, pCreateInfo, ppAllocator0, ppBuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, Span<VkBufferCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkBuffer> pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkBuffer* ppBuffer2 = pBuffer)
					{
						VkResult ret = CreateBufferNative(device, ppCreateInfo0, ppAllocator1, ppBuffer2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateBuffer(VkDevice device, ref VkBufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkBuffer pBuffer)
		{
			fixed (VkBufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkBuffer* ppBuffer2 = &pBuffer)
					{
						VkResult ret = CreateBufferNative(device, ppCreateInfo0, ppAllocator1, ppBuffer2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyBufferNative(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)funcTable[34])(device, buffer, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkBuffer, nint, void>)funcTable[34])(device, buffer, (nint)pAllocator);
			#endif
		}

		public void DestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)
		{
			DestroyBufferNative(device, buffer, pAllocator);
		}

		public void DestroyBuffer(VkDevice device, VkBuffer buffer, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyBufferNative(device, buffer, ppAllocator0);
			}
		}

		public void DestroyBuffer(VkDevice device, VkBuffer buffer, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyBufferNative(device, buffer, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateBufferViewNative(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)funcTable[35])(device, pCreateInfo, pAllocator, pView);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[35])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pView);
			#endif
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)
		{
			VkResult ret = CreateBufferViewNative(device, pCreateInfo, pAllocator, pView);
			return ret;
		}

		public VkResult CreateBufferView(VkDevice device, Span<VkBufferViewCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, pAllocator, pView);
				return ret;
			}
		}

		public VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, pAllocator, pView);
				return ret;
			}
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkBufferView* pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateBufferViewNative(device, pCreateInfo, ppAllocator0, pView);
				return ret;
			}
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkBufferView* pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateBufferViewNative(device, pCreateInfo, ppAllocator0, pView);
				return ret;
			}
		}

		public VkResult CreateBufferView(VkDevice device, Span<VkBufferViewCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkBufferView* pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, ppAllocator1, pView);
					return ret;
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkBufferView* pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, ppAllocator1, pView);
					return ret;
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkBufferView> pView)
		{
			fixed (VkBufferView* ppView0 = pView)
			{
				VkResult ret = CreateBufferViewNative(device, pCreateInfo, pAllocator, ppView0);
				return ret;
			}
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkBufferView pView)
		{
			fixed (VkBufferView* ppView0 = &pView)
			{
				VkResult ret = CreateBufferViewNative(device, pCreateInfo, pAllocator, ppView0);
				return ret;
			}
		}

		public VkResult CreateBufferView(VkDevice device, Span<VkBufferViewCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkBufferView> pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkBufferView* ppView1 = pView)
				{
					VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, pAllocator, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkBufferView pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkBufferView* ppView1 = &pView)
				{
					VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, pAllocator, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkBufferView> pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkBufferView* ppView1 = pView)
				{
					VkResult ret = CreateBufferViewNative(device, pCreateInfo, ppAllocator0, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkBufferView pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkBufferView* ppView1 = &pView)
				{
					VkResult ret = CreateBufferViewNative(device, pCreateInfo, ppAllocator0, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, Span<VkBufferViewCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkBufferView> pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkBufferView* ppView2 = pView)
					{
						VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, ppAllocator1, ppView2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateBufferView(VkDevice device, ref VkBufferViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkBufferView pView)
		{
			fixed (VkBufferViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkBufferView* ppView2 = &pView)
					{
						VkResult ret = CreateBufferViewNative(device, ppCreateInfo0, ppAllocator1, ppView2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyBufferViewNative(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)funcTable[36])(device, bufferView, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkBufferView, nint, void>)funcTable[36])(device, bufferView, (nint)pAllocator);
			#endif
		}

		public void DestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)
		{
			DestroyBufferViewNative(device, bufferView, pAllocator);
		}

		public void DestroyBufferView(VkDevice device, VkBufferView bufferView, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyBufferViewNative(device, bufferView, ppAllocator0);
			}
		}

		public void DestroyBufferView(VkDevice device, VkBufferView bufferView, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyBufferViewNative(device, bufferView, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateImageNative(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)funcTable[37])(device, pCreateInfo, pAllocator, pImage);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[37])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pImage);
			#endif
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)
		{
			VkResult ret = CreateImageNative(device, pCreateInfo, pAllocator, pImage);
			return ret;
		}

		public VkResult CreateImage(VkDevice device, Span<VkImageCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateImageNative(device, ppCreateInfo0, pAllocator, pImage);
				return ret;
			}
		}

		public VkResult CreateImage(VkDevice device, ref VkImageCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateImageNative(device, ppCreateInfo0, pAllocator, pImage);
				return ret;
			}
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkImage* pImage)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateImageNative(device, pCreateInfo, ppAllocator0, pImage);
				return ret;
			}
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkImage* pImage)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateImageNative(device, pCreateInfo, ppAllocator0, pImage);
				return ret;
			}
		}

		public VkResult CreateImage(VkDevice device, Span<VkImageCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkImage* pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateImageNative(device, ppCreateInfo0, ppAllocator1, pImage);
					return ret;
				}
			}
		}

		public VkResult CreateImage(VkDevice device, ref VkImageCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkImage* pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateImageNative(device, ppCreateInfo0, ppAllocator1, pImage);
					return ret;
				}
			}
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkImage> pImage)
		{
			fixed (VkImage* ppImage0 = pImage)
			{
				VkResult ret = CreateImageNative(device, pCreateInfo, pAllocator, ppImage0);
				return ret;
			}
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkImage pImage)
		{
			fixed (VkImage* ppImage0 = &pImage)
			{
				VkResult ret = CreateImageNative(device, pCreateInfo, pAllocator, ppImage0);
				return ret;
			}
		}

		public VkResult CreateImage(VkDevice device, Span<VkImageCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkImage> pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkImage* ppImage1 = pImage)
				{
					VkResult ret = CreateImageNative(device, ppCreateInfo0, pAllocator, ppImage1);
					return ret;
				}
			}
		}

		public VkResult CreateImage(VkDevice device, ref VkImageCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkImage pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkImage* ppImage1 = &pImage)
				{
					VkResult ret = CreateImageNative(device, ppCreateInfo0, pAllocator, ppImage1);
					return ret;
				}
			}
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkImage> pImage)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkImage* ppImage1 = pImage)
				{
					VkResult ret = CreateImageNative(device, pCreateInfo, ppAllocator0, ppImage1);
					return ret;
				}
			}
		}

		public VkResult CreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkImage pImage)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkImage* ppImage1 = &pImage)
				{
					VkResult ret = CreateImageNative(device, pCreateInfo, ppAllocator0, ppImage1);
					return ret;
				}
			}
		}

		public VkResult CreateImage(VkDevice device, Span<VkImageCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkImage> pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkImage* ppImage2 = pImage)
					{
						VkResult ret = CreateImageNative(device, ppCreateInfo0, ppAllocator1, ppImage2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateImage(VkDevice device, ref VkImageCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkImage pImage)
		{
			fixed (VkImageCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkImage* ppImage2 = &pImage)
					{
						VkResult ret = CreateImageNative(device, ppCreateInfo0, ppAllocator1, ppImage2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyImageNative(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkAllocationCallbacks*, void>)funcTable[38])(device, image, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, nint, void>)funcTable[38])(device, image, (nint)pAllocator);
			#endif
		}

		public void DestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)
		{
			DestroyImageNative(device, image, pAllocator);
		}

		public void DestroyImage(VkDevice device, VkImage image, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyImageNative(device, image, ppAllocator0);
			}
		}

		public void DestroyImage(VkDevice device, VkImage image, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyImageNative(device, image, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetImageSubresourceLayoutNative(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*, void>)funcTable[39])(device, image, pSubresource, pLayout);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, nint, nint, void>)funcTable[39])(device, image, (nint)pSubresource, (nint)pLayout);
			#endif
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)
		{
			GetImageSubresourceLayoutNative(device, image, pSubresource, pLayout);
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, Span<VkImageSubresource> pSubresource, VkSubresourceLayout* pLayout)
		{
			fixed (VkImageSubresource* ppSubresource0 = pSubresource)
			{
				GetImageSubresourceLayoutNative(device, image, ppSubresource0, pLayout);
			}
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource pSubresource, VkSubresourceLayout* pLayout)
		{
			fixed (VkImageSubresource* ppSubresource0 = &pSubresource)
			{
				GetImageSubresourceLayoutNative(device, image, ppSubresource0, pLayout);
			}
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, Span<VkSubresourceLayout> pLayout)
		{
			fixed (VkSubresourceLayout* ppLayout0 = pLayout)
			{
				GetImageSubresourceLayoutNative(device, image, pSubresource, ppLayout0);
			}
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, ref VkSubresourceLayout pLayout)
		{
			fixed (VkSubresourceLayout* ppLayout0 = &pLayout)
			{
				GetImageSubresourceLayoutNative(device, image, pSubresource, ppLayout0);
			}
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, Span<VkImageSubresource> pSubresource, Span<VkSubresourceLayout> pLayout)
		{
			fixed (VkImageSubresource* ppSubresource0 = pSubresource)
			{
				fixed (VkSubresourceLayout* ppLayout1 = pLayout)
				{
					GetImageSubresourceLayoutNative(device, image, ppSubresource0, ppLayout1);
				}
			}
		}

		public void GetImageSubresourceLayout(VkDevice device, VkImage image, ref VkImageSubresource pSubresource, ref VkSubresourceLayout pLayout)
		{
			fixed (VkImageSubresource* ppSubresource0 = &pSubresource)
			{
				fixed (VkSubresourceLayout* ppLayout1 = &pLayout)
				{
					GetImageSubresourceLayoutNative(device, image, ppSubresource0, ppLayout1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateImageViewNative(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)funcTable[40])(device, pCreateInfo, pAllocator, pView);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[40])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pView);
			#endif
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)
		{
			VkResult ret = CreateImageViewNative(device, pCreateInfo, pAllocator, pView);
			return ret;
		}

		public VkResult CreateImageView(VkDevice device, Span<VkImageViewCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateImageViewNative(device, ppCreateInfo0, pAllocator, pView);
				return ret;
			}
		}

		public VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateImageViewNative(device, ppCreateInfo0, pAllocator, pView);
				return ret;
			}
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkImageView* pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateImageViewNative(device, pCreateInfo, ppAllocator0, pView);
				return ret;
			}
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkImageView* pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateImageViewNative(device, pCreateInfo, ppAllocator0, pView);
				return ret;
			}
		}

		public VkResult CreateImageView(VkDevice device, Span<VkImageViewCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkImageView* pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateImageViewNative(device, ppCreateInfo0, ppAllocator1, pView);
					return ret;
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkImageView* pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateImageViewNative(device, ppCreateInfo0, ppAllocator1, pView);
					return ret;
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkImageView> pView)
		{
			fixed (VkImageView* ppView0 = pView)
			{
				VkResult ret = CreateImageViewNative(device, pCreateInfo, pAllocator, ppView0);
				return ret;
			}
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkImageView pView)
		{
			fixed (VkImageView* ppView0 = &pView)
			{
				VkResult ret = CreateImageViewNative(device, pCreateInfo, pAllocator, ppView0);
				return ret;
			}
		}

		public VkResult CreateImageView(VkDevice device, Span<VkImageViewCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkImageView> pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkImageView* ppView1 = pView)
				{
					VkResult ret = CreateImageViewNative(device, ppCreateInfo0, pAllocator, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkImageView pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkImageView* ppView1 = &pView)
				{
					VkResult ret = CreateImageViewNative(device, ppCreateInfo0, pAllocator, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkImageView> pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkImageView* ppView1 = pView)
				{
					VkResult ret = CreateImageViewNative(device, pCreateInfo, ppAllocator0, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkImageView pView)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkImageView* ppView1 = &pView)
				{
					VkResult ret = CreateImageViewNative(device, pCreateInfo, ppAllocator0, ppView1);
					return ret;
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, Span<VkImageViewCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkImageView> pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkImageView* ppView2 = pView)
					{
						VkResult ret = CreateImageViewNative(device, ppCreateInfo0, ppAllocator1, ppView2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateImageView(VkDevice device, ref VkImageViewCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkImageView pView)
		{
			fixed (VkImageViewCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkImageView* ppView2 = &pView)
					{
						VkResult ret = CreateImageViewNative(device, ppCreateInfo0, ppAllocator1, ppView2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyImageViewNative(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImageView, VkAllocationCallbacks*, void>)funcTable[41])(device, imageView, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkImageView, nint, void>)funcTable[41])(device, imageView, (nint)pAllocator);
			#endif
		}

		public void DestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)
		{
			DestroyImageViewNative(device, imageView, pAllocator);
		}

		public void DestroyImageView(VkDevice device, VkImageView imageView, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyImageViewNative(device, imageView, ppAllocator0);
			}
		}

		public void DestroyImageView(VkDevice device, VkImageView imageView, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyImageViewNative(device, imageView, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateShaderModuleNative(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)funcTable[42])(device, pCreateInfo, pAllocator, pShaderModule);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[42])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pShaderModule);
			#endif
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)
		{
			VkResult ret = CreateShaderModuleNative(device, pCreateInfo, pAllocator, pShaderModule);
			return ret;
		}

		public VkResult CreateShaderModule(VkDevice device, Span<VkShaderModuleCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, pAllocator, pShaderModule);
				return ret;
			}
		}

		public VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, pAllocator, pShaderModule);
				return ret;
			}
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkShaderModule* pShaderModule)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateShaderModuleNative(device, pCreateInfo, ppAllocator0, pShaderModule);
				return ret;
			}
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkShaderModule* pShaderModule)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateShaderModuleNative(device, pCreateInfo, ppAllocator0, pShaderModule);
				return ret;
			}
		}

		public VkResult CreateShaderModule(VkDevice device, Span<VkShaderModuleCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkShaderModule* pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, ppAllocator1, pShaderModule);
					return ret;
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkShaderModule* pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, ppAllocator1, pShaderModule);
					return ret;
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkShaderModule> pShaderModule)
		{
			fixed (VkShaderModule* ppShaderModule0 = pShaderModule)
			{
				VkResult ret = CreateShaderModuleNative(device, pCreateInfo, pAllocator, ppShaderModule0);
				return ret;
			}
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkShaderModule pShaderModule)
		{
			fixed (VkShaderModule* ppShaderModule0 = &pShaderModule)
			{
				VkResult ret = CreateShaderModuleNative(device, pCreateInfo, pAllocator, ppShaderModule0);
				return ret;
			}
		}

		public VkResult CreateShaderModule(VkDevice device, Span<VkShaderModuleCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkShaderModule> pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkShaderModule* ppShaderModule1 = pShaderModule)
				{
					VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, pAllocator, ppShaderModule1);
					return ret;
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkShaderModule pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkShaderModule* ppShaderModule1 = &pShaderModule)
				{
					VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, pAllocator, ppShaderModule1);
					return ret;
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkShaderModule> pShaderModule)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkShaderModule* ppShaderModule1 = pShaderModule)
				{
					VkResult ret = CreateShaderModuleNative(device, pCreateInfo, ppAllocator0, ppShaderModule1);
					return ret;
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkShaderModule pShaderModule)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkShaderModule* ppShaderModule1 = &pShaderModule)
				{
					VkResult ret = CreateShaderModuleNative(device, pCreateInfo, ppAllocator0, ppShaderModule1);
					return ret;
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, Span<VkShaderModuleCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkShaderModule> pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkShaderModule* ppShaderModule2 = pShaderModule)
					{
						VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, ppAllocator1, ppShaderModule2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateShaderModule(VkDevice device, ref VkShaderModuleCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkShaderModule pShaderModule)
		{
			fixed (VkShaderModuleCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkShaderModule* ppShaderModule2 = &pShaderModule)
					{
						VkResult ret = CreateShaderModuleNative(device, ppCreateInfo0, ppAllocator1, ppShaderModule2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyShaderModuleNative(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)funcTable[43])(device, shaderModule, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkShaderModule, nint, void>)funcTable[43])(device, shaderModule, (nint)pAllocator);
			#endif
		}

		public void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)
		{
			DestroyShaderModuleNative(device, shaderModule, pAllocator);
		}

		public void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyShaderModuleNative(device, shaderModule, ppAllocator0);
			}
		}

		public void DestroyShaderModule(VkDevice device, VkShaderModule shaderModule, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyShaderModuleNative(device, shaderModule, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreatePipelineCacheNative(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)funcTable[44])(device, pCreateInfo, pAllocator, pPipelineCache);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[44])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pPipelineCache);
			#endif
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)
		{
			VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, pAllocator, pPipelineCache);
			return ret;
		}

		public VkResult CreatePipelineCache(VkDevice device, Span<VkPipelineCacheCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, pAllocator, pPipelineCache);
				return ret;
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, pAllocator, pPipelineCache);
				return ret;
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkPipelineCache* pPipelineCache)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, ppAllocator0, pPipelineCache);
				return ret;
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkPipelineCache* pPipelineCache)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, ppAllocator0, pPipelineCache);
				return ret;
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, Span<VkPipelineCacheCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkPipelineCache* pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, ppAllocator1, pPipelineCache);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkPipelineCache* pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, ppAllocator1, pPipelineCache);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkPipelineCache> pPipelineCache)
		{
			fixed (VkPipelineCache* ppPipelineCache0 = pPipelineCache)
			{
				VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, pAllocator, ppPipelineCache0);
				return ret;
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPipelineCache pPipelineCache)
		{
			fixed (VkPipelineCache* ppPipelineCache0 = &pPipelineCache)
			{
				VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, pAllocator, ppPipelineCache0);
				return ret;
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, Span<VkPipelineCacheCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkPipelineCache> pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkPipelineCache* ppPipelineCache1 = pPipelineCache)
				{
					VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, pAllocator, ppPipelineCache1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPipelineCache pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkPipelineCache* ppPipelineCache1 = &pPipelineCache)
				{
					VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, pAllocator, ppPipelineCache1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkPipelineCache> pPipelineCache)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkPipelineCache* ppPipelineCache1 = pPipelineCache)
				{
					VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, ppAllocator0, ppPipelineCache1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkPipelineCache pPipelineCache)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkPipelineCache* ppPipelineCache1 = &pPipelineCache)
				{
					VkResult ret = CreatePipelineCacheNative(device, pCreateInfo, ppAllocator0, ppPipelineCache1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, Span<VkPipelineCacheCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkPipelineCache> pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkPipelineCache* ppPipelineCache2 = pPipelineCache)
					{
						VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, ppAllocator1, ppPipelineCache2);
						return ret;
					}
				}
			}
		}

		public VkResult CreatePipelineCache(VkDevice device, ref VkPipelineCacheCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkPipelineCache pPipelineCache)
		{
			fixed (VkPipelineCacheCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkPipelineCache* ppPipelineCache2 = &pPipelineCache)
					{
						VkResult ret = CreatePipelineCacheNative(device, ppCreateInfo0, ppAllocator1, ppPipelineCache2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyPipelineCacheNative(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)funcTable[45])(device, pipelineCache, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nint, void>)funcTable[45])(device, pipelineCache, (nint)pAllocator);
			#endif
		}

		public void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)
		{
			DestroyPipelineCacheNative(device, pipelineCache, pAllocator);
		}

		public void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyPipelineCacheNative(device, pipelineCache, ppAllocator0);
			}
		}

		public void DestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyPipelineCacheNative(device, pipelineCache, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult GetPipelineCacheDataNative(VkDevice device, VkPipelineCache pipelineCache, nuint* pDataSize, void* pData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nuint*, void*, VkResult>)funcTable[46])(device, pipelineCache, pDataSize, pData);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, nint, nint, VkResult>)funcTable[46])(device, pipelineCache, (nint)pDataSize, (nint)pData);
			#endif
		}

		public VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint* pDataSize, void* pData)
		{
			VkResult ret = GetPipelineCacheDataNative(device, pipelineCache, pDataSize, pData);
			return ret;
		}

		public VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, Span<nuint> pDataSize, void* pData)
		{
			fixed (nuint* ppDataSize0 = pDataSize)
			{
				VkResult ret = GetPipelineCacheDataNative(device, pipelineCache, ppDataSize0, pData);
				return ret;
			}
		}

		public VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, ref nuint pDataSize, void* pData)
		{
			fixed (nuint* ppDataSize0 = &pDataSize)
			{
				VkResult ret = GetPipelineCacheDataNative(device, pipelineCache, ppDataSize0, pData);
				return ret;
			}
		}

		public VkResult GetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, nuint* pDataSize, nint pData)
		{
			VkResult ret = GetPipelineCacheDataNative(device, pipelineCache, pDataSize, (void*)pData);
			return ret;
		}

		public VkResult GetPipelineCacheData<TPData>(VkDevice device, VkPipelineCache pipelineCache, nuint* pDataSize, Span<TPData> pData) where TPData : unmanaged
		{
			fixed (TPData* ppData0 = pData)
			{
				VkResult ret = GetPipelineCacheDataNative(device, pipelineCache, pDataSize, ppData0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult MergePipelineCachesNative(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* pSrcCaches)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkPipelineCache*, VkResult>)funcTable[47])(device, dstCache, srcCacheCount, pSrcCaches);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, nint, VkResult>)funcTable[47])(device, dstCache, srcCacheCount, (nint)pSrcCaches);
			#endif
		}

		public VkResult MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* pSrcCaches)
		{
			VkResult ret = MergePipelineCachesNative(device, dstCache, srcCacheCount, pSrcCaches);
			return ret;
		}

		public VkResult MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, Span<VkPipelineCache> pSrcCaches)
		{
			fixed (VkPipelineCache* ppSrcCaches0 = pSrcCaches)
			{
				VkResult ret = MergePipelineCachesNative(device, dstCache, srcCacheCount, ppSrcCaches0);
				return ret;
			}
		}

		public VkResult MergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, ref VkPipelineCache pSrcCaches)
		{
			fixed (VkPipelineCache* ppSrcCaches0 = &pSrcCaches)
			{
				VkResult ret = MergePipelineCachesNative(device, dstCache, srcCacheCount, ppSrcCaches0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateGraphicsPipelinesNative(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)funcTable[48])(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, nint, nint, nint, VkResult>)funcTable[48])(device, pipelineCache, createInfoCount, (nint)pCreateInfos, (nint)pAllocator, (nint)pPipelines);
			#endif
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
			return ret;
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkGraphicsPipelineCreateInfo> pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, pPipelines);
				return ret;
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, pPipelines);
				return ret;
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, Span<VkAllocationCallbacks> pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, pPipelines);
				return ret;
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, ref VkAllocationCallbacks pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, pPipelines);
				return ret;
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkGraphicsPipelineCreateInfo> pCreateInfos, Span<VkAllocationCallbacks> pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, pPipelines);
					return ret;
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, pPipelines);
					return ret;
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkPipeline* ppPipelines0 = pPipelines)
			{
				VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, ppPipelines0);
				return ret;
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkPipeline* ppPipelines0 = &pPipelines)
			{
				VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, ppPipelines0);
				return ret;
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkGraphicsPipelineCreateInfo> pCreateInfos, VkAllocationCallbacks* pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				fixed (VkPipeline* ppPipelines1 = pPipelines)
				{
					VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				fixed (VkPipeline* ppPipelines1 = &pPipelines)
				{
					VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, Span<VkAllocationCallbacks> pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkPipeline* ppPipelines1 = pPipelines)
				{
					VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, ref VkAllocationCallbacks pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkPipeline* ppPipelines1 = &pPipelines)
				{
					VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkGraphicsPipelineCreateInfo> pCreateInfos, Span<VkAllocationCallbacks> pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkPipeline* ppPipelines2 = pPipelines)
					{
						VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, ppPipelines2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkGraphicsPipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkGraphicsPipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkPipeline* ppPipelines2 = &pPipelines)
					{
						VkResult ret = CreateGraphicsPipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, ppPipelines2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateComputePipelinesNative(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)funcTable[49])(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineCache, uint, nint, nint, nint, VkResult>)funcTable[49])(device, pipelineCache, createInfoCount, (nint)pCreateInfos, (nint)pAllocator, (nint)pPipelines);
			#endif
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
			return ret;
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkComputePipelineCreateInfo> pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, pPipelines);
				return ret;
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, pPipelines);
				return ret;
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, Span<VkAllocationCallbacks> pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, pPipelines);
				return ret;
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, ref VkAllocationCallbacks pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, pPipelines);
				return ret;
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkComputePipelineCreateInfo> pCreateInfos, Span<VkAllocationCallbacks> pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, pPipelines);
					return ret;
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, VkPipeline* pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, pPipelines);
					return ret;
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkPipeline* ppPipelines0 = pPipelines)
			{
				VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, ppPipelines0);
				return ret;
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkPipeline* ppPipelines0 = &pPipelines)
			{
				VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, ppPipelines0);
				return ret;
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkComputePipelineCreateInfo> pCreateInfos, VkAllocationCallbacks* pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				fixed (VkPipeline* ppPipelines1 = pPipelines)
				{
					VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, VkAllocationCallbacks* pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				fixed (VkPipeline* ppPipelines1 = &pPipelines)
				{
					VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, pAllocator, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, Span<VkAllocationCallbacks> pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkPipeline* ppPipelines1 = pPipelines)
				{
					VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, ref VkAllocationCallbacks pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkPipeline* ppPipelines1 = &pPipelines)
				{
					VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, pCreateInfos, ppAllocator0, ppPipelines1);
					return ret;
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, Span<VkComputePipelineCreateInfo> pCreateInfos, Span<VkAllocationCallbacks> pAllocator, Span<VkPipeline> pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkPipeline* ppPipelines2 = pPipelines)
					{
						VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, ppPipelines2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, ref VkComputePipelineCreateInfo pCreateInfos, ref VkAllocationCallbacks pAllocator, ref VkPipeline pPipelines)
		{
			fixed (VkComputePipelineCreateInfo* ppCreateInfos0 = &pCreateInfos)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkPipeline* ppPipelines2 = &pPipelines)
					{
						VkResult ret = CreateComputePipelinesNative(device, pipelineCache, createInfoCount, ppCreateInfos0, ppAllocator1, ppPipelines2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyPipelineNative(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)funcTable[50])(device, pipeline, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkPipeline, nint, void>)funcTable[50])(device, pipeline, (nint)pAllocator);
			#endif
		}

		public void DestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)
		{
			DestroyPipelineNative(device, pipeline, pAllocator);
		}

		public void DestroyPipeline(VkDevice device, VkPipeline pipeline, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyPipelineNative(device, pipeline, ppAllocator0);
			}
		}

		public void DestroyPipeline(VkDevice device, VkPipeline pipeline, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyPipelineNative(device, pipeline, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreatePipelineLayoutNative(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)funcTable[51])(device, pCreateInfo, pAllocator, pPipelineLayout);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[51])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pPipelineLayout);
			#endif
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, pAllocator, pPipelineLayout);
			return ret;
		}

		public VkResult CreatePipelineLayout(VkDevice device, Span<VkPipelineLayoutCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, pAllocator, pPipelineLayout);
				return ret;
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, pAllocator, pPipelineLayout);
				return ret;
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, ppAllocator0, pPipelineLayout);
				return ret;
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, ppAllocator0, pPipelineLayout);
				return ret;
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, Span<VkPipelineLayoutCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, ppAllocator1, pPipelineLayout);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkPipelineLayout* pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, ppAllocator1, pPipelineLayout);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkPipelineLayout> pPipelineLayout)
		{
			fixed (VkPipelineLayout* ppPipelineLayout0 = pPipelineLayout)
			{
				VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, pAllocator, ppPipelineLayout0);
				return ret;
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPipelineLayout pPipelineLayout)
		{
			fixed (VkPipelineLayout* ppPipelineLayout0 = &pPipelineLayout)
			{
				VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, pAllocator, ppPipelineLayout0);
				return ret;
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, Span<VkPipelineLayoutCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkPipelineLayout> pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkPipelineLayout* ppPipelineLayout1 = pPipelineLayout)
				{
					VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, pAllocator, ppPipelineLayout1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkPipelineLayout pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkPipelineLayout* ppPipelineLayout1 = &pPipelineLayout)
				{
					VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, pAllocator, ppPipelineLayout1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkPipelineLayout> pPipelineLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkPipelineLayout* ppPipelineLayout1 = pPipelineLayout)
				{
					VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, ppAllocator0, ppPipelineLayout1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkPipelineLayout pPipelineLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkPipelineLayout* ppPipelineLayout1 = &pPipelineLayout)
				{
					VkResult ret = CreatePipelineLayoutNative(device, pCreateInfo, ppAllocator0, ppPipelineLayout1);
					return ret;
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, Span<VkPipelineLayoutCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkPipelineLayout> pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkPipelineLayout* ppPipelineLayout2 = pPipelineLayout)
					{
						VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, ppAllocator1, ppPipelineLayout2);
						return ret;
					}
				}
			}
		}

		public VkResult CreatePipelineLayout(VkDevice device, ref VkPipelineLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkPipelineLayout pPipelineLayout)
		{
			fixed (VkPipelineLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkPipelineLayout* ppPipelineLayout2 = &pPipelineLayout)
					{
						VkResult ret = CreatePipelineLayoutNative(device, ppCreateInfo0, ppAllocator1, ppPipelineLayout2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyPipelineLayoutNative(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)funcTable[52])(device, pipelineLayout, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkPipelineLayout, nint, void>)funcTable[52])(device, pipelineLayout, (nint)pAllocator);
			#endif
		}

		public void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)
		{
			DestroyPipelineLayoutNative(device, pipelineLayout, pAllocator);
		}

		public void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyPipelineLayoutNative(device, pipelineLayout, ppAllocator0);
			}
		}

		public void DestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyPipelineLayoutNative(device, pipelineLayout, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateSamplerNative(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)funcTable[53])(device, pCreateInfo, pAllocator, pSampler);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[53])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pSampler);
			#endif
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)
		{
			VkResult ret = CreateSamplerNative(device, pCreateInfo, pAllocator, pSampler);
			return ret;
		}

		public VkResult CreateSampler(VkDevice device, Span<VkSamplerCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateSamplerNative(device, ppCreateInfo0, pAllocator, pSampler);
				return ret;
			}
		}

		public VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateSamplerNative(device, ppCreateInfo0, pAllocator, pSampler);
				return ret;
			}
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkSampler* pSampler)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateSamplerNative(device, pCreateInfo, ppAllocator0, pSampler);
				return ret;
			}
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkSampler* pSampler)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateSamplerNative(device, pCreateInfo, ppAllocator0, pSampler);
				return ret;
			}
		}

		public VkResult CreateSampler(VkDevice device, Span<VkSamplerCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkSampler* pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateSamplerNative(device, ppCreateInfo0, ppAllocator1, pSampler);
					return ret;
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkSampler* pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateSamplerNative(device, ppCreateInfo0, ppAllocator1, pSampler);
					return ret;
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkSampler> pSampler)
		{
			fixed (VkSampler* ppSampler0 = pSampler)
			{
				VkResult ret = CreateSamplerNative(device, pCreateInfo, pAllocator, ppSampler0);
				return ret;
			}
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSampler pSampler)
		{
			fixed (VkSampler* ppSampler0 = &pSampler)
			{
				VkResult ret = CreateSamplerNative(device, pCreateInfo, pAllocator, ppSampler0);
				return ret;
			}
		}

		public VkResult CreateSampler(VkDevice device, Span<VkSamplerCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkSampler> pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkSampler* ppSampler1 = pSampler)
				{
					VkResult ret = CreateSamplerNative(device, ppCreateInfo0, pAllocator, ppSampler1);
					return ret;
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkSampler pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkSampler* ppSampler1 = &pSampler)
				{
					VkResult ret = CreateSamplerNative(device, ppCreateInfo0, pAllocator, ppSampler1);
					return ret;
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkSampler> pSampler)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkSampler* ppSampler1 = pSampler)
				{
					VkResult ret = CreateSamplerNative(device, pCreateInfo, ppAllocator0, ppSampler1);
					return ret;
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkSampler pSampler)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkSampler* ppSampler1 = &pSampler)
				{
					VkResult ret = CreateSamplerNative(device, pCreateInfo, ppAllocator0, ppSampler1);
					return ret;
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, Span<VkSamplerCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkSampler> pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkSampler* ppSampler2 = pSampler)
					{
						VkResult ret = CreateSamplerNative(device, ppCreateInfo0, ppAllocator1, ppSampler2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateSampler(VkDevice device, ref VkSamplerCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkSampler pSampler)
		{
			fixed (VkSamplerCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkSampler* ppSampler2 = &pSampler)
					{
						VkResult ret = CreateSamplerNative(device, ppCreateInfo0, ppAllocator1, ppSampler2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroySamplerNative(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkSampler, VkAllocationCallbacks*, void>)funcTable[54])(device, sampler, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkSampler, nint, void>)funcTable[54])(device, sampler, (nint)pAllocator);
			#endif
		}

		public void DestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)
		{
			DestroySamplerNative(device, sampler, pAllocator);
		}

		public void DestroySampler(VkDevice device, VkSampler sampler, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroySamplerNative(device, sampler, ppAllocator0);
			}
		}

		public void DestroySampler(VkDevice device, VkSampler sampler, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroySamplerNative(device, sampler, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateDescriptorSetLayoutNative(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)funcTable[55])(device, pCreateInfo, pAllocator, pSetLayout);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[55])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pSetLayout);
			#endif
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, pAllocator, pSetLayout);
			return ret;
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, Span<VkDescriptorSetLayoutCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, pAllocator, pSetLayout);
				return ret;
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, pAllocator, pSetLayout);
				return ret;
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, ppAllocator0, pSetLayout);
				return ret;
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, ppAllocator0, pSetLayout);
				return ret;
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, Span<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, ppAllocator1, pSetLayout);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkDescriptorSetLayout* pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, ppAllocator1, pSetLayout);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkDescriptorSetLayout> pSetLayout)
		{
			fixed (VkDescriptorSetLayout* ppSetLayout0 = pSetLayout)
			{
				VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, pAllocator, ppSetLayout0);
				return ret;
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorSetLayout pSetLayout)
		{
			fixed (VkDescriptorSetLayout* ppSetLayout0 = &pSetLayout)
			{
				VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, pAllocator, ppSetLayout0);
				return ret;
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, Span<VkDescriptorSetLayoutCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkDescriptorSetLayout> pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkDescriptorSetLayout* ppSetLayout1 = pSetLayout)
				{
					VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, pAllocator, ppSetLayout1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorSetLayout pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkDescriptorSetLayout* ppSetLayout1 = &pSetLayout)
				{
					VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, pAllocator, ppSetLayout1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDescriptorSetLayout> pSetLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkDescriptorSetLayout* ppSetLayout1 = pSetLayout)
				{
					VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, ppAllocator0, ppSetLayout1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkDescriptorSetLayout pSetLayout)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkDescriptorSetLayout* ppSetLayout1 = &pSetLayout)
				{
					VkResult ret = CreateDescriptorSetLayoutNative(device, pCreateInfo, ppAllocator0, ppSetLayout1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, Span<VkDescriptorSetLayoutCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDescriptorSetLayout> pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkDescriptorSetLayout* ppSetLayout2 = pSetLayout)
					{
						VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, ppAllocator1, ppSetLayout2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateDescriptorSetLayout(VkDevice device, ref VkDescriptorSetLayoutCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkDescriptorSetLayout pSetLayout)
		{
			fixed (VkDescriptorSetLayoutCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkDescriptorSetLayout* ppSetLayout2 = &pSetLayout)
					{
						VkResult ret = CreateDescriptorSetLayoutNative(device, ppCreateInfo0, ppAllocator1, ppSetLayout2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyDescriptorSetLayoutNative(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)funcTable[56])(device, descriptorSetLayout, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetLayout, nint, void>)funcTable[56])(device, descriptorSetLayout, (nint)pAllocator);
			#endif
		}

		public void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)
		{
			DestroyDescriptorSetLayoutNative(device, descriptorSetLayout, pAllocator);
		}

		public void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyDescriptorSetLayoutNative(device, descriptorSetLayout, ppAllocator0);
			}
		}

		public void DestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyDescriptorSetLayoutNative(device, descriptorSetLayout, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateDescriptorPoolNative(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)funcTable[57])(device, pCreateInfo, pAllocator, pDescriptorPool);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[57])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pDescriptorPool);
			#endif
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, pAllocator, pDescriptorPool);
			return ret;
		}

		public VkResult CreateDescriptorPool(VkDevice device, Span<VkDescriptorPoolCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, pAllocator, pDescriptorPool);
				return ret;
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, pAllocator, pDescriptorPool);
				return ret;
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, ppAllocator0, pDescriptorPool);
				return ret;
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, ppAllocator0, pDescriptorPool);
				return ret;
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, Span<VkDescriptorPoolCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, ppAllocator1, pDescriptorPool);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkDescriptorPool* pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, ppAllocator1, pDescriptorPool);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkDescriptorPool> pDescriptorPool)
		{
			fixed (VkDescriptorPool* ppDescriptorPool0 = pDescriptorPool)
			{
				VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, pAllocator, ppDescriptorPool0);
				return ret;
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorPool pDescriptorPool)
		{
			fixed (VkDescriptorPool* ppDescriptorPool0 = &pDescriptorPool)
			{
				VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, pAllocator, ppDescriptorPool0);
				return ret;
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, Span<VkDescriptorPoolCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkDescriptorPool> pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkDescriptorPool* ppDescriptorPool1 = pDescriptorPool)
				{
					VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, pAllocator, ppDescriptorPool1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkDescriptorPool pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkDescriptorPool* ppDescriptorPool1 = &pDescriptorPool)
				{
					VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, pAllocator, ppDescriptorPool1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDescriptorPool> pDescriptorPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkDescriptorPool* ppDescriptorPool1 = pDescriptorPool)
				{
					VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, ppAllocator0, ppDescriptorPool1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkDescriptorPool pDescriptorPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkDescriptorPool* ppDescriptorPool1 = &pDescriptorPool)
				{
					VkResult ret = CreateDescriptorPoolNative(device, pCreateInfo, ppAllocator0, ppDescriptorPool1);
					return ret;
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, Span<VkDescriptorPoolCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkDescriptorPool> pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkDescriptorPool* ppDescriptorPool2 = pDescriptorPool)
					{
						VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, ppAllocator1, ppDescriptorPool2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateDescriptorPool(VkDevice device, ref VkDescriptorPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkDescriptorPool pDescriptorPool)
		{
			fixed (VkDescriptorPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkDescriptorPool* ppDescriptorPool2 = &pDescriptorPool)
					{
						VkResult ret = CreateDescriptorPoolNative(device, ppCreateInfo0, ppAllocator1, ppDescriptorPool2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyDescriptorPoolNative(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)funcTable[58])(device, descriptorPool, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, nint, void>)funcTable[58])(device, descriptorPool, (nint)pAllocator);
			#endif
		}

		public void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)
		{
			DestroyDescriptorPoolNative(device, descriptorPool, pAllocator);
		}

		public void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyDescriptorPoolNative(device, descriptorPool, ppAllocator0);
			}
		}

		public void DestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyDescriptorPoolNative(device, descriptorPool, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult ResetDescriptorPoolNative(VkDevice device, VkDescriptorPool descriptorPool, uint flags)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkResult>)funcTable[59])(device, descriptorPool, flags);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkResult>)funcTable[59])(device, descriptorPool, flags);
			#endif
		}

		public VkResult ResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, uint flags)
		{
			VkResult ret = ResetDescriptorPoolNative(device, descriptorPool, flags);
			return ret;
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult AllocateDescriptorSetsNative(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet*, VkResult>)funcTable[60])(device, pAllocateInfo, pDescriptorSets);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, VkResult>)funcTable[60])(device, (nint)pAllocateInfo, (nint)pDescriptorSets);
			#endif
		}

		public VkResult AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)
		{
			VkResult ret = AllocateDescriptorSetsNative(device, pAllocateInfo, pDescriptorSets);
			return ret;
		}

		public VkResult AllocateDescriptorSets(VkDevice device, Span<VkDescriptorSetAllocateInfo> pAllocateInfo, VkDescriptorSet* pDescriptorSets)
		{
			fixed (VkDescriptorSetAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				VkResult ret = AllocateDescriptorSetsNative(device, ppAllocateInfo0, pDescriptorSets);
				return ret;
			}
		}

		public VkResult AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo pAllocateInfo, VkDescriptorSet* pDescriptorSets)
		{
			fixed (VkDescriptorSetAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				VkResult ret = AllocateDescriptorSetsNative(device, ppAllocateInfo0, pDescriptorSets);
				return ret;
			}
		}

		public VkResult AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, Span<VkDescriptorSet> pDescriptorSets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = pDescriptorSets)
			{
				VkResult ret = AllocateDescriptorSetsNative(device, pAllocateInfo, ppDescriptorSets0);
				return ret;
			}
		}

		public VkResult AllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, ref VkDescriptorSet pDescriptorSets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = &pDescriptorSets)
			{
				VkResult ret = AllocateDescriptorSetsNative(device, pAllocateInfo, ppDescriptorSets0);
				return ret;
			}
		}

		public VkResult AllocateDescriptorSets(VkDevice device, Span<VkDescriptorSetAllocateInfo> pAllocateInfo, Span<VkDescriptorSet> pDescriptorSets)
		{
			fixed (VkDescriptorSetAllocateInfo* ppAllocateInfo0 = pAllocateInfo)
			{
				fixed (VkDescriptorSet* ppDescriptorSets1 = pDescriptorSets)
				{
					VkResult ret = AllocateDescriptorSetsNative(device, ppAllocateInfo0, ppDescriptorSets1);
					return ret;
				}
			}
		}

		public VkResult AllocateDescriptorSets(VkDevice device, ref VkDescriptorSetAllocateInfo pAllocateInfo, ref VkDescriptorSet pDescriptorSets)
		{
			fixed (VkDescriptorSetAllocateInfo* ppAllocateInfo0 = &pAllocateInfo)
			{
				fixed (VkDescriptorSet* ppDescriptorSets1 = &pDescriptorSets)
				{
					VkResult ret = AllocateDescriptorSetsNative(device, ppAllocateInfo0, ppDescriptorSets1);
					return ret;
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult FreeDescriptorSetsNative(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, VkDescriptorSet*, VkResult>)funcTable[61])(device, descriptorPool, descriptorSetCount, pDescriptorSets);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, VkDescriptorPool, uint, nint, VkResult>)funcTable[61])(device, descriptorPool, descriptorSetCount, (nint)pDescriptorSets);
			#endif
		}

		public VkResult FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets)
		{
			VkResult ret = FreeDescriptorSetsNative(device, descriptorPool, descriptorSetCount, pDescriptorSets);
			return ret;
		}

		public VkResult FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, Span<VkDescriptorSet> pDescriptorSets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = pDescriptorSets)
			{
				VkResult ret = FreeDescriptorSetsNative(device, descriptorPool, descriptorSetCount, ppDescriptorSets0);
				return ret;
			}
		}

		public VkResult FreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, ref VkDescriptorSet pDescriptorSets)
		{
			fixed (VkDescriptorSet* ppDescriptorSets0 = &pDescriptorSets)
			{
				VkResult ret = FreeDescriptorSetsNative(device, descriptorPool, descriptorSetCount, ppDescriptorSets0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void UpdateDescriptorSetsNative(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void>)funcTable[62])(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, uint, nint, void>)funcTable[62])(device, descriptorWriteCount, (nint)pDescriptorWrites, descriptorCopyCount, (nint)pDescriptorCopies);
			#endif
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
		{
			UpdateDescriptorSetsNative(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, Span<VkWriteDescriptorSet> pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
		{
			fixed (VkWriteDescriptorSet* ppDescriptorWrites0 = pDescriptorWrites)
			{
				UpdateDescriptorSetsNative(device, descriptorWriteCount, ppDescriptorWrites0, descriptorCopyCount, pDescriptorCopies);
			}
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
		{
			fixed (VkWriteDescriptorSet* ppDescriptorWrites0 = &pDescriptorWrites)
			{
				UpdateDescriptorSetsNative(device, descriptorWriteCount, ppDescriptorWrites0, descriptorCopyCount, pDescriptorCopies);
			}
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, Span<VkCopyDescriptorSet> pDescriptorCopies)
		{
			fixed (VkCopyDescriptorSet* ppDescriptorCopies0 = pDescriptorCopies)
			{
				UpdateDescriptorSetsNative(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, ppDescriptorCopies0);
			}
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet pDescriptorCopies)
		{
			fixed (VkCopyDescriptorSet* ppDescriptorCopies0 = &pDescriptorCopies)
			{
				UpdateDescriptorSetsNative(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, ppDescriptorCopies0);
			}
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, Span<VkWriteDescriptorSet> pDescriptorWrites, uint descriptorCopyCount, Span<VkCopyDescriptorSet> pDescriptorCopies)
		{
			fixed (VkWriteDescriptorSet* ppDescriptorWrites0 = pDescriptorWrites)
			{
				fixed (VkCopyDescriptorSet* ppDescriptorCopies1 = pDescriptorCopies)
				{
					UpdateDescriptorSetsNative(device, descriptorWriteCount, ppDescriptorWrites0, descriptorCopyCount, ppDescriptorCopies1);
				}
			}
		}

		public void UpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, ref VkWriteDescriptorSet pDescriptorWrites, uint descriptorCopyCount, ref VkCopyDescriptorSet pDescriptorCopies)
		{
			fixed (VkWriteDescriptorSet* ppDescriptorWrites0 = &pDescriptorWrites)
			{
				fixed (VkCopyDescriptorSet* ppDescriptorCopies1 = &pDescriptorCopies)
				{
					UpdateDescriptorSetsNative(device, descriptorWriteCount, ppDescriptorWrites0, descriptorCopyCount, ppDescriptorCopies1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateFramebufferNative(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)funcTable[63])(device, pCreateInfo, pAllocator, pFramebuffer);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[63])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pFramebuffer);
			#endif
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)
		{
			VkResult ret = CreateFramebufferNative(device, pCreateInfo, pAllocator, pFramebuffer);
			return ret;
		}

		public VkResult CreateFramebuffer(VkDevice device, Span<VkFramebufferCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, pAllocator, pFramebuffer);
				return ret;
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, pAllocator, pFramebuffer);
				return ret;
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkFramebuffer* pFramebuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateFramebufferNative(device, pCreateInfo, ppAllocator0, pFramebuffer);
				return ret;
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkFramebuffer* pFramebuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateFramebufferNative(device, pCreateInfo, ppAllocator0, pFramebuffer);
				return ret;
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, Span<VkFramebufferCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkFramebuffer* pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, ppAllocator1, pFramebuffer);
					return ret;
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkFramebuffer* pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, ppAllocator1, pFramebuffer);
					return ret;
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkFramebuffer> pFramebuffer)
		{
			fixed (VkFramebuffer* ppFramebuffer0 = pFramebuffer)
			{
				VkResult ret = CreateFramebufferNative(device, pCreateInfo, pAllocator, ppFramebuffer0);
				return ret;
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkFramebuffer pFramebuffer)
		{
			fixed (VkFramebuffer* ppFramebuffer0 = &pFramebuffer)
			{
				VkResult ret = CreateFramebufferNative(device, pCreateInfo, pAllocator, ppFramebuffer0);
				return ret;
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, Span<VkFramebufferCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkFramebuffer> pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkFramebuffer* ppFramebuffer1 = pFramebuffer)
				{
					VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, pAllocator, ppFramebuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkFramebuffer pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkFramebuffer* ppFramebuffer1 = &pFramebuffer)
				{
					VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, pAllocator, ppFramebuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkFramebuffer> pFramebuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkFramebuffer* ppFramebuffer1 = pFramebuffer)
				{
					VkResult ret = CreateFramebufferNative(device, pCreateInfo, ppAllocator0, ppFramebuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkFramebuffer pFramebuffer)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkFramebuffer* ppFramebuffer1 = &pFramebuffer)
				{
					VkResult ret = CreateFramebufferNative(device, pCreateInfo, ppAllocator0, ppFramebuffer1);
					return ret;
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, Span<VkFramebufferCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkFramebuffer> pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkFramebuffer* ppFramebuffer2 = pFramebuffer)
					{
						VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, ppAllocator1, ppFramebuffer2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateFramebuffer(VkDevice device, ref VkFramebufferCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkFramebuffer pFramebuffer)
		{
			fixed (VkFramebufferCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkFramebuffer* ppFramebuffer2 = &pFramebuffer)
					{
						VkResult ret = CreateFramebufferNative(device, ppCreateInfo0, ppAllocator1, ppFramebuffer2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyFramebufferNative(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)funcTable[64])(device, framebuffer, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkFramebuffer, nint, void>)funcTable[64])(device, framebuffer, (nint)pAllocator);
			#endif
		}

		public void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)
		{
			DestroyFramebufferNative(device, framebuffer, pAllocator);
		}

		public void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyFramebufferNative(device, framebuffer, ppAllocator0);
			}
		}

		public void DestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyFramebufferNative(device, framebuffer, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateRenderPassNative(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)funcTable[65])(device, pCreateInfo, pAllocator, pRenderPass);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[65])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pRenderPass);
			#endif
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			VkResult ret = CreateRenderPassNative(device, pCreateInfo, pAllocator, pRenderPass);
			return ret;
		}

		public VkResult CreateRenderPass(VkDevice device, Span<VkRenderPassCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, pAllocator, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, pAllocator, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateRenderPassNative(device, pCreateInfo, ppAllocator0, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateRenderPassNative(device, pCreateInfo, ppAllocator0, pRenderPass);
				return ret;
			}
		}

		public VkResult CreateRenderPass(VkDevice device, Span<VkRenderPassCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, ppAllocator1, pRenderPass);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkRenderPass* pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, ppAllocator1, pRenderPass);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkRenderPass* ppRenderPass0 = pRenderPass)
			{
				VkResult ret = CreateRenderPassNative(device, pCreateInfo, pAllocator, ppRenderPass0);
				return ret;
			}
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkRenderPass* ppRenderPass0 = &pRenderPass)
			{
				VkResult ret = CreateRenderPassNative(device, pCreateInfo, pAllocator, ppRenderPass0);
				return ret;
			}
		}

		public VkResult CreateRenderPass(VkDevice device, Span<VkRenderPassCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkRenderPass* ppRenderPass1 = pRenderPass)
				{
					VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, pAllocator, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkRenderPass* ppRenderPass1 = &pRenderPass)
				{
					VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, pAllocator, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkRenderPass* ppRenderPass1 = pRenderPass)
				{
					VkResult ret = CreateRenderPassNative(device, pCreateInfo, ppAllocator0, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				fixed (VkRenderPass* ppRenderPass1 = &pRenderPass)
				{
					VkResult ret = CreateRenderPassNative(device, pCreateInfo, ppAllocator0, ppRenderPass1);
					return ret;
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, Span<VkRenderPassCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkRenderPass> pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					fixed (VkRenderPass* ppRenderPass2 = pRenderPass)
					{
						VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, ppAllocator1, ppRenderPass2);
						return ret;
					}
				}
			}
		}

		public VkResult CreateRenderPass(VkDevice device, ref VkRenderPassCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, ref VkRenderPass pRenderPass)
		{
			fixed (VkRenderPassCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					fixed (VkRenderPass* ppRenderPass2 = &pRenderPass)
					{
						VkResult ret = CreateRenderPassNative(device, ppCreateInfo0, ppAllocator1, ppRenderPass2);
						return ret;
					}
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void DestroyRenderPassNative(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)funcTable[66])(device, renderPass, pAllocator);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, nint, void>)funcTable[66])(device, renderPass, (nint)pAllocator);
			#endif
		}

		public void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)
		{
			DestroyRenderPassNative(device, renderPass, pAllocator);
		}

		public void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, Span<VkAllocationCallbacks> pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				DestroyRenderPassNative(device, renderPass, ppAllocator0);
			}
		}

		public void DestroyRenderPass(VkDevice device, VkRenderPass renderPass, ref VkAllocationCallbacks pAllocator)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				DestroyRenderPassNative(device, renderPass, ppAllocator0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetRenderAreaGranularityNative(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, VkExtent2D*, void>)funcTable[67])(device, renderPass, pGranularity);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkRenderPass, nint, void>)funcTable[67])(device, renderPass, (nint)pGranularity);
			#endif
		}

		public void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)
		{
			GetRenderAreaGranularityNative(device, renderPass, pGranularity);
		}

		public void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, Span<VkExtent2D> pGranularity)
		{
			fixed (VkExtent2D* ppGranularity0 = pGranularity)
			{
				GetRenderAreaGranularityNative(device, renderPass, ppGranularity0);
			}
		}

		public void GetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, ref VkExtent2D pGranularity)
		{
			fixed (VkExtent2D* ppGranularity0 = &pGranularity)
			{
				GetRenderAreaGranularityNative(device, renderPass, ppGranularity0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetRenderingAreaGranularityNative(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkRenderingAreaInfo*, VkExtent2D*, void>)funcTable[68])(device, pRenderingAreaInfo, pGranularity);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[68])(device, (nint)pRenderingAreaInfo, (nint)pGranularity);
			#endif
		}

		public void GetRenderingAreaGranularity(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, VkExtent2D* pGranularity)
		{
			GetRenderingAreaGranularityNative(device, pRenderingAreaInfo, pGranularity);
		}

		public void GetRenderingAreaGranularity(VkDevice device, Span<VkRenderingAreaInfo> pRenderingAreaInfo, VkExtent2D* pGranularity)
		{
			fixed (VkRenderingAreaInfo* ppRenderingAreaInfo0 = pRenderingAreaInfo)
			{
				GetRenderingAreaGranularityNative(device, ppRenderingAreaInfo0, pGranularity);
			}
		}

		public void GetRenderingAreaGranularity(VkDevice device, ref VkRenderingAreaInfo pRenderingAreaInfo, VkExtent2D* pGranularity)
		{
			fixed (VkRenderingAreaInfo* ppRenderingAreaInfo0 = &pRenderingAreaInfo)
			{
				GetRenderingAreaGranularityNative(device, ppRenderingAreaInfo0, pGranularity);
			}
		}

		public void GetRenderingAreaGranularity(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, Span<VkExtent2D> pGranularity)
		{
			fixed (VkExtent2D* ppGranularity0 = pGranularity)
			{
				GetRenderingAreaGranularityNative(device, pRenderingAreaInfo, ppGranularity0);
			}
		}

		public void GetRenderingAreaGranularity(VkDevice device, VkRenderingAreaInfo* pRenderingAreaInfo, ref VkExtent2D pGranularity)
		{
			fixed (VkExtent2D* ppGranularity0 = &pGranularity)
			{
				GetRenderingAreaGranularityNative(device, pRenderingAreaInfo, ppGranularity0);
			}
		}

		public void GetRenderingAreaGranularity(VkDevice device, Span<VkRenderingAreaInfo> pRenderingAreaInfo, Span<VkExtent2D> pGranularity)
		{
			fixed (VkRenderingAreaInfo* ppRenderingAreaInfo0 = pRenderingAreaInfo)
			{
				fixed (VkExtent2D* ppGranularity1 = pGranularity)
				{
					GetRenderingAreaGranularityNative(device, ppRenderingAreaInfo0, ppGranularity1);
				}
			}
		}

		public void GetRenderingAreaGranularity(VkDevice device, ref VkRenderingAreaInfo pRenderingAreaInfo, ref VkExtent2D pGranularity)
		{
			fixed (VkRenderingAreaInfo* ppRenderingAreaInfo0 = &pRenderingAreaInfo)
			{
				fixed (VkExtent2D* ppGranularity1 = &pGranularity)
				{
					GetRenderingAreaGranularityNative(device, ppRenderingAreaInfo0, ppGranularity1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CreateCommandPoolNative(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)funcTable[69])(device, pCreateInfo, pAllocator, pCommandPool);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, nint, VkResult>)funcTable[69])(device, (nint)pCreateInfo, (nint)pAllocator, (nint)pCommandPool);
			#endif
		}

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)
		{
			VkResult ret = CreateCommandPoolNative(device, pCreateInfo, pAllocator, pCommandPool);
			return ret;
		}

		public VkResult CreateCommandPool(VkDevice device, Span<VkCommandPoolCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, pAllocator, pCommandPool);
				return ret;
			}
		}

		public VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, pAllocator, pCommandPool);
				return ret;
			}
		}

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkCommandPool* pCommandPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				VkResult ret = CreateCommandPoolNative(device, pCreateInfo, ppAllocator0, pCommandPool);
				return ret;
			}
		}

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, ref VkAllocationCallbacks pAllocator, VkCommandPool* pCommandPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = &pAllocator)
			{
				VkResult ret = CreateCommandPoolNative(device, pCreateInfo, ppAllocator0, pCommandPool);
				return ret;
			}
		}

		public VkResult CreateCommandPool(VkDevice device, Span<VkCommandPoolCreateInfo> pCreateInfo, Span<VkAllocationCallbacks> pAllocator, VkCommandPool* pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = pAllocator)
				{
					VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, ppAllocator1, pCommandPool);
					return ret;
				}
			}
		}

		public VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo pCreateInfo, ref VkAllocationCallbacks pAllocator, VkCommandPool* pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkAllocationCallbacks* ppAllocator1 = &pAllocator)
				{
					VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, ppAllocator1, pCommandPool);
					return ret;
				}
			}
		}

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkCommandPool> pCommandPool)
		{
			fixed (VkCommandPool* ppCommandPool0 = pCommandPool)
			{
				VkResult ret = CreateCommandPoolNative(device, pCreateInfo, pAllocator, ppCommandPool0);
				return ret;
			}
		}

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkCommandPool pCommandPool)
		{
			fixed (VkCommandPool* ppCommandPool0 = &pCommandPool)
			{
				VkResult ret = CreateCommandPoolNative(device, pCreateInfo, pAllocator, ppCommandPool0);
				return ret;
			}
		}

		public VkResult CreateCommandPool(VkDevice device, Span<VkCommandPoolCreateInfo> pCreateInfo, VkAllocationCallbacks* pAllocator, Span<VkCommandPool> pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = pCreateInfo)
			{
				fixed (VkCommandPool* ppCommandPool1 = pCommandPool)
				{
					VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, pAllocator, ppCommandPool1);
					return ret;
				}
			}
		}

		public VkResult CreateCommandPool(VkDevice device, ref VkCommandPoolCreateInfo pCreateInfo, VkAllocationCallbacks* pAllocator, ref VkCommandPool pCommandPool)
		{
			fixed (VkCommandPoolCreateInfo* ppCreateInfo0 = &pCreateInfo)
			{
				fixed (VkCommandPool* ppCommandPool1 = &pCommandPool)
				{
					VkResult ret = CreateCommandPoolNative(device, ppCreateInfo0, pAllocator, ppCommandPool1);
					return ret;
				}
			}
		}

		public VkResult CreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, Span<VkAllocationCallbacks> pAllocator, Span<VkCommandPool> pCommandPool)
		{
			fixed (VkAllocationCallbacks* ppAllocator0 = pAllocator)
			{
				fixed (VkCommandPool* ppCommandPool1 = pCommandPool)
				{
					VkResult ret = CreateCommandPoolNative(device, pCreateInfo, ppAllocator0, ppCommandPool1);
					return ret;
				}
			}
		}
	}
}
