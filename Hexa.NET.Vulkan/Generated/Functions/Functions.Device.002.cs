// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using HexaGen.Runtime;
using System.Runtime.CompilerServices;
using System.Numerics;

namespace Hexa.NET.Vulkan
{
	public unsafe partial class Device
	{

		public void CmdPipelineBarrier2(VkCommandBuffer commandBuffer, ref VkDependencyInfo pDependencyInfo)
		{
			fixed (VkDependencyInfo* ppDependencyInfo0 = &pDependencyInfo)
			{
				CmdPipelineBarrier2Native(commandBuffer, ppDependencyInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult QueueSubmit2Native(VkQueue queue, uint submitCount, VkSubmitInfo2* pSubmits, VkFence fence)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult>)funcTable[185])(queue, submitCount, pSubmits, fence);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkQueue, uint, nint, VkFence, VkResult>)funcTable[185])(queue, submitCount, (nint)pSubmits, fence);
			#endif
		}

		public VkResult QueueSubmit2(VkQueue queue, uint submitCount, VkSubmitInfo2* pSubmits, VkFence fence)
		{
			VkResult ret = QueueSubmit2Native(queue, submitCount, pSubmits, fence);
			return ret;
		}

		public VkResult QueueSubmit2(VkQueue queue, uint submitCount, Span<VkSubmitInfo2> pSubmits, VkFence fence)
		{
			fixed (VkSubmitInfo2* ppSubmits0 = pSubmits)
			{
				VkResult ret = QueueSubmit2Native(queue, submitCount, ppSubmits0, fence);
				return ret;
			}
		}

		public VkResult QueueSubmit2(VkQueue queue, uint submitCount, ref VkSubmitInfo2 pSubmits, VkFence fence)
		{
			fixed (VkSubmitInfo2* ppSubmits0 = &pSubmits)
			{
				VkResult ret = QueueSubmit2Native(queue, submitCount, ppSubmits0, fence);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdWriteTimestamp2Native(VkCommandBuffer commandBuffer, ulong stage, VkQueryPool queryPool, uint query)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, ulong, VkQueryPool, uint, void>)funcTable[186])(commandBuffer, stage, queryPool, query);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, ulong, VkQueryPool, uint, void>)funcTable[186])(commandBuffer, stage, queryPool, query);
			#endif
		}

		public void CmdWriteTimestamp2(VkCommandBuffer commandBuffer, ulong stage, VkQueryPool queryPool, uint query)
		{
			CmdWriteTimestamp2Native(commandBuffer, stage, queryPool, query);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CopyMemoryToImageNative(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkCopyMemoryToImageInfo*, VkResult>)funcTable[187])(device, pCopyMemoryToImageInfo);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, VkResult>)funcTable[187])(device, (nint)pCopyMemoryToImageInfo);
			#endif
		}

		public VkResult CopyMemoryToImage(VkDevice device, VkCopyMemoryToImageInfo* pCopyMemoryToImageInfo)
		{
			VkResult ret = CopyMemoryToImageNative(device, pCopyMemoryToImageInfo);
			return ret;
		}

		public VkResult CopyMemoryToImage(VkDevice device, Span<VkCopyMemoryToImageInfo> pCopyMemoryToImageInfo)
		{
			fixed (VkCopyMemoryToImageInfo* ppCopyMemoryToImageInfo0 = pCopyMemoryToImageInfo)
			{
				VkResult ret = CopyMemoryToImageNative(device, ppCopyMemoryToImageInfo0);
				return ret;
			}
		}

		public VkResult CopyMemoryToImage(VkDevice device, ref VkCopyMemoryToImageInfo pCopyMemoryToImageInfo)
		{
			fixed (VkCopyMemoryToImageInfo* ppCopyMemoryToImageInfo0 = &pCopyMemoryToImageInfo)
			{
				VkResult ret = CopyMemoryToImageNative(device, ppCopyMemoryToImageInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CopyImageToMemoryNative(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkCopyImageToMemoryInfo*, VkResult>)funcTable[188])(device, pCopyImageToMemoryInfo);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, VkResult>)funcTable[188])(device, (nint)pCopyImageToMemoryInfo);
			#endif
		}

		public VkResult CopyImageToMemory(VkDevice device, VkCopyImageToMemoryInfo* pCopyImageToMemoryInfo)
		{
			VkResult ret = CopyImageToMemoryNative(device, pCopyImageToMemoryInfo);
			return ret;
		}

		public VkResult CopyImageToMemory(VkDevice device, Span<VkCopyImageToMemoryInfo> pCopyImageToMemoryInfo)
		{
			fixed (VkCopyImageToMemoryInfo* ppCopyImageToMemoryInfo0 = pCopyImageToMemoryInfo)
			{
				VkResult ret = CopyImageToMemoryNative(device, ppCopyImageToMemoryInfo0);
				return ret;
			}
		}

		public VkResult CopyImageToMemory(VkDevice device, ref VkCopyImageToMemoryInfo pCopyImageToMemoryInfo)
		{
			fixed (VkCopyImageToMemoryInfo* ppCopyImageToMemoryInfo0 = &pCopyImageToMemoryInfo)
			{
				VkResult ret = CopyImageToMemoryNative(device, ppCopyImageToMemoryInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult CopyImageToImageNative(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkCopyImageToImageInfo*, VkResult>)funcTable[189])(device, pCopyImageToImageInfo);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, VkResult>)funcTable[189])(device, (nint)pCopyImageToImageInfo);
			#endif
		}

		public VkResult CopyImageToImage(VkDevice device, VkCopyImageToImageInfo* pCopyImageToImageInfo)
		{
			VkResult ret = CopyImageToImageNative(device, pCopyImageToImageInfo);
			return ret;
		}

		public VkResult CopyImageToImage(VkDevice device, Span<VkCopyImageToImageInfo> pCopyImageToImageInfo)
		{
			fixed (VkCopyImageToImageInfo* ppCopyImageToImageInfo0 = pCopyImageToImageInfo)
			{
				VkResult ret = CopyImageToImageNative(device, ppCopyImageToImageInfo0);
				return ret;
			}
		}

		public VkResult CopyImageToImage(VkDevice device, ref VkCopyImageToImageInfo pCopyImageToImageInfo)
		{
			fixed (VkCopyImageToImageInfo* ppCopyImageToImageInfo0 = &pCopyImageToImageInfo)
			{
				VkResult ret = CopyImageToImageNative(device, ppCopyImageToImageInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult TransitionImageLayoutNative(VkDevice device, uint transitionCount, VkHostImageLayoutTransitionInfo* pTransitions)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, uint, VkHostImageLayoutTransitionInfo*, VkResult>)funcTable[190])(device, transitionCount, pTransitions);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, uint, nint, VkResult>)funcTable[190])(device, transitionCount, (nint)pTransitions);
			#endif
		}

		public VkResult TransitionImageLayout(VkDevice device, uint transitionCount, VkHostImageLayoutTransitionInfo* pTransitions)
		{
			VkResult ret = TransitionImageLayoutNative(device, transitionCount, pTransitions);
			return ret;
		}

		public VkResult TransitionImageLayout(VkDevice device, uint transitionCount, Span<VkHostImageLayoutTransitionInfo> pTransitions)
		{
			fixed (VkHostImageLayoutTransitionInfo* ppTransitions0 = pTransitions)
			{
				VkResult ret = TransitionImageLayoutNative(device, transitionCount, ppTransitions0);
				return ret;
			}
		}

		public VkResult TransitionImageLayout(VkDevice device, uint transitionCount, ref VkHostImageLayoutTransitionInfo pTransitions)
		{
			fixed (VkHostImageLayoutTransitionInfo* ppTransitions0 = &pTransitions)
			{
				VkResult ret = TransitionImageLayoutNative(device, transitionCount, ppTransitions0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBeginRenderingNative(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingInfo*, void>)funcTable[191])(commandBuffer, pRenderingInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[191])(commandBuffer, (nint)pRenderingInfo);
			#endif
		}

		public void CmdBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)
		{
			CmdBeginRenderingNative(commandBuffer, pRenderingInfo);
		}

		public void CmdBeginRendering(VkCommandBuffer commandBuffer, Span<VkRenderingInfo> pRenderingInfo)
		{
			fixed (VkRenderingInfo* ppRenderingInfo0 = pRenderingInfo)
			{
				CmdBeginRenderingNative(commandBuffer, ppRenderingInfo0);
			}
		}

		public void CmdBeginRendering(VkCommandBuffer commandBuffer, ref VkRenderingInfo pRenderingInfo)
		{
			fixed (VkRenderingInfo* ppRenderingInfo0 = &pRenderingInfo)
			{
				CmdBeginRenderingNative(commandBuffer, ppRenderingInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdEndRenderingNative(VkCommandBuffer commandBuffer)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)funcTable[192])(commandBuffer);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, void>)funcTable[192])(commandBuffer);
			#endif
		}

		public void CmdEndRendering(VkCommandBuffer commandBuffer)
		{
			CmdEndRenderingNative(commandBuffer);
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetImageSubresourceLayout2Native(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, VkImageSubresource2*, VkSubresourceLayout2*, void>)funcTable[193])(device, image, pSubresource, pLayout);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, VkImage, nint, nint, void>)funcTable[193])(device, image, (nint)pSubresource, (nint)pLayout);
			#endif
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, VkSubresourceLayout2* pLayout)
		{
			GetImageSubresourceLayout2Native(device, image, pSubresource, pLayout);
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, Span<VkImageSubresource2> pSubresource, VkSubresourceLayout2* pLayout)
		{
			fixed (VkImageSubresource2* ppSubresource0 = pSubresource)
			{
				GetImageSubresourceLayout2Native(device, image, ppSubresource0, pLayout);
			}
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, ref VkImageSubresource2 pSubresource, VkSubresourceLayout2* pLayout)
		{
			fixed (VkImageSubresource2* ppSubresource0 = &pSubresource)
			{
				GetImageSubresourceLayout2Native(device, image, ppSubresource0, pLayout);
			}
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, Span<VkSubresourceLayout2> pLayout)
		{
			fixed (VkSubresourceLayout2* ppLayout0 = pLayout)
			{
				GetImageSubresourceLayout2Native(device, image, pSubresource, ppLayout0);
			}
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, VkImageSubresource2* pSubresource, ref VkSubresourceLayout2 pLayout)
		{
			fixed (VkSubresourceLayout2* ppLayout0 = &pLayout)
			{
				GetImageSubresourceLayout2Native(device, image, pSubresource, ppLayout0);
			}
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, Span<VkImageSubresource2> pSubresource, Span<VkSubresourceLayout2> pLayout)
		{
			fixed (VkImageSubresource2* ppSubresource0 = pSubresource)
			{
				fixed (VkSubresourceLayout2* ppLayout1 = pLayout)
				{
					GetImageSubresourceLayout2Native(device, image, ppSubresource0, ppLayout1);
				}
			}
		}

		public void GetImageSubresourceLayout2(VkDevice device, VkImage image, ref VkImageSubresource2 pSubresource, ref VkSubresourceLayout2 pLayout)
		{
			fixed (VkImageSubresource2* ppSubresource0 = &pSubresource)
			{
				fixed (VkSubresourceLayout2* ppLayout1 = &pLayout)
				{
					GetImageSubresourceLayout2Native(device, image, ppSubresource0, ppLayout1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void GetDeviceImageSubresourceLayoutNative(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkDevice, VkDeviceImageSubresourceInfo*, VkSubresourceLayout2*, void>)funcTable[194])(device, pInfo, pLayout);
			#else
			((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, void>)funcTable[194])(device, (nint)pInfo, (nint)pLayout);
			#endif
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, VkSubresourceLayout2* pLayout)
		{
			GetDeviceImageSubresourceLayoutNative(device, pInfo, pLayout);
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, Span<VkDeviceImageSubresourceInfo> pInfo, VkSubresourceLayout2* pLayout)
		{
			fixed (VkDeviceImageSubresourceInfo* ppInfo0 = pInfo)
			{
				GetDeviceImageSubresourceLayoutNative(device, ppInfo0, pLayout);
			}
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, ref VkDeviceImageSubresourceInfo pInfo, VkSubresourceLayout2* pLayout)
		{
			fixed (VkDeviceImageSubresourceInfo* ppInfo0 = &pInfo)
			{
				GetDeviceImageSubresourceLayoutNative(device, ppInfo0, pLayout);
			}
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, Span<VkSubresourceLayout2> pLayout)
		{
			fixed (VkSubresourceLayout2* ppLayout0 = pLayout)
			{
				GetDeviceImageSubresourceLayoutNative(device, pInfo, ppLayout0);
			}
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, VkDeviceImageSubresourceInfo* pInfo, ref VkSubresourceLayout2 pLayout)
		{
			fixed (VkSubresourceLayout2* ppLayout0 = &pLayout)
			{
				GetDeviceImageSubresourceLayoutNative(device, pInfo, ppLayout0);
			}
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, Span<VkDeviceImageSubresourceInfo> pInfo, Span<VkSubresourceLayout2> pLayout)
		{
			fixed (VkDeviceImageSubresourceInfo* ppInfo0 = pInfo)
			{
				fixed (VkSubresourceLayout2* ppLayout1 = pLayout)
				{
					GetDeviceImageSubresourceLayoutNative(device, ppInfo0, ppLayout1);
				}
			}
		}

		public void GetDeviceImageSubresourceLayout(VkDevice device, ref VkDeviceImageSubresourceInfo pInfo, ref VkSubresourceLayout2 pLayout)
		{
			fixed (VkDeviceImageSubresourceInfo* ppInfo0 = &pInfo)
			{
				fixed (VkSubresourceLayout2* ppLayout1 = &pLayout)
				{
					GetDeviceImageSubresourceLayoutNative(device, ppInfo0, ppLayout1);
				}
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult MapMemory2Native(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkMemoryMapInfo*, void**, VkResult>)funcTable[195])(device, pMemoryMapInfo, ppData);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, nint, VkResult>)funcTable[195])(device, (nint)pMemoryMapInfo, (nint)ppData);
			#endif
		}

		public VkResult MapMemory2(VkDevice device, VkMemoryMapInfo* pMemoryMapInfo, void** ppData)
		{
			VkResult ret = MapMemory2Native(device, pMemoryMapInfo, ppData);
			return ret;
		}

		public VkResult MapMemory2(VkDevice device, Span<VkMemoryMapInfo> pMemoryMapInfo, void** ppData)
		{
			fixed (VkMemoryMapInfo* ppMemoryMapInfo0 = pMemoryMapInfo)
			{
				VkResult ret = MapMemory2Native(device, ppMemoryMapInfo0, ppData);
				return ret;
			}
		}

		public VkResult MapMemory2(VkDevice device, ref VkMemoryMapInfo pMemoryMapInfo, void** ppData)
		{
			fixed (VkMemoryMapInfo* ppMemoryMapInfo0 = &pMemoryMapInfo)
			{
				VkResult ret = MapMemory2Native(device, ppMemoryMapInfo0, ppData);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal VkResult UnmapMemory2Native(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo)
		{
			#if NET5_0_OR_GREATER
			return ((delegate* unmanaged[Cdecl]<VkDevice, VkMemoryUnmapInfo*, VkResult>)funcTable[196])(device, pMemoryUnmapInfo);
			#else
			return (VkResult)((delegate* unmanaged[Cdecl]<VkDevice, nint, VkResult>)funcTable[196])(device, (nint)pMemoryUnmapInfo);
			#endif
		}

		public VkResult UnmapMemory2(VkDevice device, VkMemoryUnmapInfo* pMemoryUnmapInfo)
		{
			VkResult ret = UnmapMemory2Native(device, pMemoryUnmapInfo);
			return ret;
		}

		public VkResult UnmapMemory2(VkDevice device, Span<VkMemoryUnmapInfo> pMemoryUnmapInfo)
		{
			fixed (VkMemoryUnmapInfo* ppMemoryUnmapInfo0 = pMemoryUnmapInfo)
			{
				VkResult ret = UnmapMemory2Native(device, ppMemoryUnmapInfo0);
				return ret;
			}
		}

		public VkResult UnmapMemory2(VkDevice device, ref VkMemoryUnmapInfo pMemoryUnmapInfo)
		{
			fixed (VkMemoryUnmapInfo* ppMemoryUnmapInfo0 = &pMemoryUnmapInfo)
			{
				VkResult ret = UnmapMemory2Native(device, ppMemoryUnmapInfo0);
				return ret;
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdBindDescriptorSets2Native(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkBindDescriptorSetsInfo*, void>)funcTable[197])(commandBuffer, pBindDescriptorSetsInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[197])(commandBuffer, (nint)pBindDescriptorSetsInfo);
			#endif
		}

		public void CmdBindDescriptorSets2(VkCommandBuffer commandBuffer, VkBindDescriptorSetsInfo* pBindDescriptorSetsInfo)
		{
			CmdBindDescriptorSets2Native(commandBuffer, pBindDescriptorSetsInfo);
		}

		public void CmdBindDescriptorSets2(VkCommandBuffer commandBuffer, Span<VkBindDescriptorSetsInfo> pBindDescriptorSetsInfo)
		{
			fixed (VkBindDescriptorSetsInfo* ppBindDescriptorSetsInfo0 = pBindDescriptorSetsInfo)
			{
				CmdBindDescriptorSets2Native(commandBuffer, ppBindDescriptorSetsInfo0);
			}
		}

		public void CmdBindDescriptorSets2(VkCommandBuffer commandBuffer, ref VkBindDescriptorSetsInfo pBindDescriptorSetsInfo)
		{
			fixed (VkBindDescriptorSetsInfo* ppBindDescriptorSetsInfo0 = &pBindDescriptorSetsInfo)
			{
				CmdBindDescriptorSets2Native(commandBuffer, ppBindDescriptorSetsInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPushConstants2Native(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPushConstantsInfo*, void>)funcTable[198])(commandBuffer, pPushConstantsInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[198])(commandBuffer, (nint)pPushConstantsInfo);
			#endif
		}

		public void CmdPushConstants2(VkCommandBuffer commandBuffer, VkPushConstantsInfo* pPushConstantsInfo)
		{
			CmdPushConstants2Native(commandBuffer, pPushConstantsInfo);
		}

		public void CmdPushConstants2(VkCommandBuffer commandBuffer, Span<VkPushConstantsInfo> pPushConstantsInfo)
		{
			fixed (VkPushConstantsInfo* ppPushConstantsInfo0 = pPushConstantsInfo)
			{
				CmdPushConstants2Native(commandBuffer, ppPushConstantsInfo0);
			}
		}

		public void CmdPushConstants2(VkCommandBuffer commandBuffer, ref VkPushConstantsInfo pPushConstantsInfo)
		{
			fixed (VkPushConstantsInfo* ppPushConstantsInfo0 = &pPushConstantsInfo)
			{
				CmdPushConstants2Native(commandBuffer, ppPushConstantsInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPushDescriptorSet2Native(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPushDescriptorSetInfo*, void>)funcTable[199])(commandBuffer, pPushDescriptorSetInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[199])(commandBuffer, (nint)pPushDescriptorSetInfo);
			#endif
		}

		public void CmdPushDescriptorSet2(VkCommandBuffer commandBuffer, VkPushDescriptorSetInfo* pPushDescriptorSetInfo)
		{
			CmdPushDescriptorSet2Native(commandBuffer, pPushDescriptorSetInfo);
		}

		public void CmdPushDescriptorSet2(VkCommandBuffer commandBuffer, Span<VkPushDescriptorSetInfo> pPushDescriptorSetInfo)
		{
			fixed (VkPushDescriptorSetInfo* ppPushDescriptorSetInfo0 = pPushDescriptorSetInfo)
			{
				CmdPushDescriptorSet2Native(commandBuffer, ppPushDescriptorSetInfo0);
			}
		}

		public void CmdPushDescriptorSet2(VkCommandBuffer commandBuffer, ref VkPushDescriptorSetInfo pPushDescriptorSetInfo)
		{
			fixed (VkPushDescriptorSetInfo* ppPushDescriptorSetInfo0 = &pPushDescriptorSetInfo)
			{
				CmdPushDescriptorSet2Native(commandBuffer, ppPushDescriptorSetInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdPushDescriptorSetWithTemplate2Native(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkPushDescriptorSetWithTemplateInfo*, void>)funcTable[200])(commandBuffer, pPushDescriptorSetWithTemplateInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[200])(commandBuffer, (nint)pPushDescriptorSetWithTemplateInfo);
			#endif
		}

		public void CmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, VkPushDescriptorSetWithTemplateInfo* pPushDescriptorSetWithTemplateInfo)
		{
			CmdPushDescriptorSetWithTemplate2Native(commandBuffer, pPushDescriptorSetWithTemplateInfo);
		}

		public void CmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, Span<VkPushDescriptorSetWithTemplateInfo> pPushDescriptorSetWithTemplateInfo)
		{
			fixed (VkPushDescriptorSetWithTemplateInfo* ppPushDescriptorSetWithTemplateInfo0 = pPushDescriptorSetWithTemplateInfo)
			{
				CmdPushDescriptorSetWithTemplate2Native(commandBuffer, ppPushDescriptorSetWithTemplateInfo0);
			}
		}

		public void CmdPushDescriptorSetWithTemplate2(VkCommandBuffer commandBuffer, ref VkPushDescriptorSetWithTemplateInfo pPushDescriptorSetWithTemplateInfo)
		{
			fixed (VkPushDescriptorSetWithTemplateInfo* ppPushDescriptorSetWithTemplateInfo0 = &pPushDescriptorSetWithTemplateInfo)
			{
				CmdPushDescriptorSetWithTemplate2Native(commandBuffer, ppPushDescriptorSetWithTemplateInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetRenderingAttachmentLocationsNative(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingAttachmentLocationInfo*, void>)funcTable[201])(commandBuffer, pLocationInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[201])(commandBuffer, (nint)pLocationInfo);
			#endif
		}

		public void CmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, VkRenderingAttachmentLocationInfo* pLocationInfo)
		{
			CmdSetRenderingAttachmentLocationsNative(commandBuffer, pLocationInfo);
		}

		public void CmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, Span<VkRenderingAttachmentLocationInfo> pLocationInfo)
		{
			fixed (VkRenderingAttachmentLocationInfo* ppLocationInfo0 = pLocationInfo)
			{
				CmdSetRenderingAttachmentLocationsNative(commandBuffer, ppLocationInfo0);
			}
		}

		public void CmdSetRenderingAttachmentLocations(VkCommandBuffer commandBuffer, ref VkRenderingAttachmentLocationInfo pLocationInfo)
		{
			fixed (VkRenderingAttachmentLocationInfo* ppLocationInfo0 = &pLocationInfo)
			{
				CmdSetRenderingAttachmentLocationsNative(commandBuffer, ppLocationInfo0);
			}
		}

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		internal void CmdSetRenderingInputAttachmentIndicesNative(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo)
		{
			#if NET5_0_OR_GREATER
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, VkRenderingInputAttachmentIndexInfo*, void>)funcTable[202])(commandBuffer, pInputAttachmentIndexInfo);
			#else
			((delegate* unmanaged[Cdecl]<VkCommandBuffer, nint, void>)funcTable[202])(commandBuffer, (nint)pInputAttachmentIndexInfo);
			#endif
		}

		public void CmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, VkRenderingInputAttachmentIndexInfo* pInputAttachmentIndexInfo)
		{
			CmdSetRenderingInputAttachmentIndicesNative(commandBuffer, pInputAttachmentIndexInfo);
		}

		public void CmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, Span<VkRenderingInputAttachmentIndexInfo> pInputAttachmentIndexInfo)
		{
			fixed (VkRenderingInputAttachmentIndexInfo* ppInputAttachmentIndexInfo0 = pInputAttachmentIndexInfo)
			{
				CmdSetRenderingInputAttachmentIndicesNative(commandBuffer, ppInputAttachmentIndexInfo0);
			}
		}

		public void CmdSetRenderingInputAttachmentIndices(VkCommandBuffer commandBuffer, ref VkRenderingInputAttachmentIndexInfo pInputAttachmentIndexInfo)
		{
			fixed (VkRenderingInputAttachmentIndexInfo* ppInputAttachmentIndexInfo0 = &pInputAttachmentIndexInfo)
			{
				CmdSetRenderingInputAttachmentIndicesNative(commandBuffer, ppInputAttachmentIndexInfo0);
			}
		}

	}
}
